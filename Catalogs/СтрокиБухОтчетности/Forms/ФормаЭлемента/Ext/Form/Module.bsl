#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	Элементы.ТипПоказателя.СписокВыбора.ЗагрузитьЗначения(
		Справочники.АлгоритмыСбораДанныхБухОтчетности.ТипыПоказателя());	

	Если Параметры.Ключ.Пустая() Тогда
		Если Параметры.Свойство("ОсновнаяСтрока") Тогда
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ОсновнаяСтрока, "ФормаОтчетности, ЕстьГрафы, Родитель, Владелец");
			
			Объект.ОсновнаяСтрока = Параметры.ОсновнаяСтрока;
			Объект.ФормаОтчетности = Реквизиты.ФормаОтчетности;
			Объект.Владелец = Реквизиты.Владелец;
			Объект.Родитель = Реквизиты.Родитель;
			Объект.ЕстьГрафы = Реквизиты.ЕстьГрафы;
			Если Объект.ЕстьГрафы Тогда
				СоздатьГрафыДопСтроки = Истина;
			КонецЕсли;
	  
		КонецЕсли;
	Иначе	
		Если Не Объект.ЕстьГрафы Тогда
			ЗагрузитьАлгоритмы(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
			
	ЗаполнитьДополнительныеАлгоритмы();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Графы, "Владелец", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно);
	
	УправлениеДоступностьюЭлементовФормы();
	
	Если Объект.ФормаОтчетности = ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.Пояснения5") Тогда
		ОбновитьФормуПоНастройкамАлгоритма();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		ОтказЗаписи = Ложь;
		Если АлгоритмИзменен Тогда
			ВыполнитьПроверкуАлгоритмаПередЗаписью(ОтказЗаписи, Ложь);
			Если Не ОтказЗаписи Тогда
				ЗаписатьТекущиеИзмененияАлгоритма();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ФормаОтчетности = ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.Пояснения5")
		И АлгоритмыСбораДанных.Количество() = 0 Тогда
		ПараметрыЗаписи.Вставить("ДобавитьАлгоритмСтрокиПояснений5");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если АлгоритмИзменен Тогда
		ЗаписатьТекущиеИзмененияАлгоритма();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Отказ Тогда
		Если СоздатьГрафыДопСтроки Тогда
			СоздатьГрафы(ТекущийОбъект.Ссылка);
		КонецЕсли;
		
		Если ПараметрыЗаписи.Свойство("ДобавитьАлгоритмСтрокиПояснений5") Тогда
			СоздатьПустойАлгоритм(ТекущийОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	Если СоздатьГрафыДопСтроки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Графы, "Владелец", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно);
		СоздатьГрафыДопСтроки = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГрафыПриАктивизацииСтроки(Элемент)
	
	Отказ = Ложь;
	Если АлгоритмИзменен Тогда
		ВыполнитьПроверкуАлгоритмаПередЗаписью(Отказ);
		Если Не Отказ Тогда
			ЗаписатьТекущиеИзмененияАлгоритма();
		КонецЕсли
	КонецЕсли;
	
	Если Не Отказ Тогда
		Элементы.ДопАлгоритмГрафы.Доступность = Ложь;
		
		Если Элементы.Графы.ТекущиеДанные <> Неопределено Тогда
					
			ЗагрузитьАлгоритмы(Элементы.Графы.ТекущиеДанные.Ссылка);
			ЗаполнитьФормуДаннымиАлгоритма();
			
			ДопАлгоритмГрафы = Элементы.Графы.ТекущиеДанные.ДопАлгоритм;
			
			Если Элементы.Графы.ТекущиеДанные.НеЗаполняется = Ложь Тогда
				 Элементы.ДопАлгоритмГрафы.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьДоступностьЭлементовНастройкиАлгоритмов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыСбораДанныхПриАктивизацииСтроки(Элемент)
	
	ОбновитьФормуПоНастройкамАлгоритма();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДобавитьИзменитьОтборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Счета) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Перед добавлением отбора необходимо выбрать счет.';
														|en = 'Select an account before adding the filter.'"),,
			"ЭтаФорма.Счета");
		Возврат;
	КонецЕсли;
	
	Если ТипПоказателя = "ОБ" И Не ЗначениеЗаполнено(КорСчета) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Перед добавлением отбора необходимо выбрать кор. счет.';
														|en = 'Select a corr. account before adding the filter.'"),,
			"ЭтаФорма.КорСчета");
		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = ПараметрыОткрытияНастройкиОтборов();

	НастраиваемаяБухгалтерскаяОтчетностьКлиент.ОткрытьФормуНастройкиОтборов(
		ПараметрыОткрытия, ЭтотОбъект, НСтр("ru = 'Настройки отбора алгоритма сбора данных бухгалтерской отчетности';
											|en = 'Set up the filter of algorithm of accounting reporting data collection'"));

КонецПроцедуры

&НаСервере
Процедура СчетаПриИзмененииНаСервере()
	
	ОбновитьСхемуОтборов();

КонецПроцедуры

&НаКлиенте
Процедура СчетаПриИзменении(Элемент)
	
	СчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыСбораДанныхНаименованиеРасшифровкиПриИзменении(Элемент)
	
	АлгоритмИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПоказателяПриИзменении(Элемент)

	АлгоритмИзменен = Истина;
	
	ОбновитьРасшифровкуСлагаемого();

КонецПроцедуры

&НаКлиенте
Процедура ВычитаемыйПриИзменении(Элемент)
	
	АлгоритмИзменен = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура КорСчетаЗначениеПриИзменении(Элемент)
	
	ОбновитьСхемуОтборов();
		
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыСбораДанныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Индекс = АлгоритмыСбораДанных.Индекс(Элементы.АлгоритмыСбораДанных.ТекущиеДанные);
	
	Если НоваяСтрока И Не Копирование Тогда
		АлгоритмыСбораДанных[Индекс].АвтоматическаяРасшифровка = Истина;
	КонецЕсли;
	
	Если Копирование Тогда
		
		АлгоритмыСбораДанных[Индекс].Ссылка = Неопределено;
		АлгоритмыСбораДанных[Индекс].ОтборЗадан = Неопределено;
		
		ЗаполнитьФормуДаннымиАлгоритма();
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовНастройкиАлгоритмов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АлгоритмыСбораДанныхПередУдалениемНаСервере(Алгоритм)

	АлгоритмОбъект = Алгоритм.ПолучитьОбъект();
	АлгоритмОбъект.УстановитьПометкуУдаления(Истина);

КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыСбораДанныхПередУдалением(Элемент, Отказ)

	Алгоритм = АлгоритмыСбораДанных[АлгоритмыСбораДанных.Индекс(Элемент.ТекущиеДанные)].Ссылка;
	Если ЗначениеЗаполнено(Алгоритм) Тогда
		АлгоритмыСбораДанныхПередУдалениемНаСервере(Алгоритм);
		ТекущийАлгоритм = Неопределено;
		АлгоритмИзменен = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДопАлгоритмГрафыПриИзмененииНаСервере(Графа, ДопАлгоритмГрафы)

	Объект = Графа.ПолучитьОбъект(); //СправочникОбъект.ГрафыБухОтчетности
	Объект.ДопАлгоритм = ДопАлгоритмГрафы;
	Объект.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ДопАлгоритмГрафыПриИзменении(Элемент)
	
	Если Элементы.Графы.ТекущиеДанные <> Неопределено Тогда
		ДопАлгоритмГрафыПриИзмененииНаСервере(Элементы.Графы.ТекущиеДанные.Ссылка, ДопАлгоритмГрафы);
		Элементы.Графы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопАлгоритмПриИзменении(Элемент)
	
	ОбновитьФормуПоНастройкамАлгоритма();
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыСбораДанныхВидДвиженияДенежныхСредствПриИзменении(Элемент)
	
	АлгоритмИзменен = Истина;
	
	ОбновитьРасшифровкуСлагаемого();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыСбораДанныхАвтоматическаяРасшифровкаПриИзменении(Элемент)
	
	АлгоритмИзменен = Истина;
	
	ОбновитьДоступностьРедактированияРасшифровки();

КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыСбораДанныхПослеУдаления(Элемент)
	
	УстановитьДоступностьЭлементовНастройкиАлгоритмов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Основное;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Перед настройкой заполнения строки ее необходимо записать.';
														|en = 'Save the line before setting up the line filling.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыСбораДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьДоступностьЭлементовНастройкиАлгоритмов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте

Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)

    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьАлгоритмы(Владелец)
	
	АлгоритмыСбораДанных.Очистить();
	Элементы.АлгоритмыСбораДанных.Обновить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АлгоритмыСбораДанныхБухОтчетности.Наименование КАК Наименование,
		|	АлгоритмыСбораДанныхБухОтчетности.ТипПоказателя КАК ТипПоказателя,
		|	АлгоритмыСбораДанныхБухОтчетности.Вычитаемый КАК Вычитаемый,
		|	АлгоритмыСбораДанныхБухОтчетности.ОтборЗадан КАК ОтборЗадан,
		|	АлгоритмыСбораДанныхБухОтчетности.Счета.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Счет КАК Счет
		|	) КАК Счета,
		|	АлгоритмыСбораДанныхБухОтчетности.КорСчета.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Счет КАК Счет
		|	) КАК КорСчета,
		|	АлгоритмыСбораДанныхБухОтчетности.Ссылка КАК Ссылка,
		|	АлгоритмыСбораДанныхБухОтчетности.НаименованиеРасшифровки КАК НаименованиеРасшифровки,
		|	АлгоритмыСбораДанныхБухОтчетности.ОтборНедоступен КАК ОтборНедоступен,
		|	АлгоритмыСбораДанныхБухОтчетности.ВидДвиженияДенежныхСредств КАК ВидДвиженияДенежныхСредств,
		|	АлгоритмыСбораДанныхБухОтчетности.АвтоматическаяРасшифровка КАК АвтоматическаяРасшифровка
		|ИЗ
		|	Справочник.АлгоритмыСбораДанныхБухОтчетности КАК АлгоритмыСбораДанныхБухОтчетности
		|ГДЕ
		|	АлгоритмыСбораДанныхБухОтчетности.Владелец = &Владелец
		|	И НЕ АлгоритмыСбораДанныхБухОтчетности.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Алгоритм = АлгоритмыСбораДанных.Добавить();
		ЗаполнитьЗначенияСвойств(Алгоритм, ВыборкаДетальныеЗаписи,,"Счета, КорСчета");
		Алгоритм.Счета.Загрузить(ВыборкаДетальныеЗаписи.Счета.Выгрузить());
		Алгоритм.КорСчета.Загрузить(ВыборкаДетальныеЗаписи.КорСчета.Выгрузить());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗаголовкиПолей(Форма)
	
	Элементы = Форма.Элементы;
	
	ПредставлениеГиперссылокОтбора = Новый Соответствие();
	ПредставлениеГиперссылокОтбора.Вставить(Истина, НСтр("ru = 'Отбор установлен, изменить';
														|en = 'Filter is set, change'"));
	ПредставлениеГиперссылокОтбора.Вставить(Ложь, НСтр("ru = 'Отбор не установлен, добавить';
														|en = 'Filter not set, add'"));
	Если Элементы.АлгоритмыСбораДанных.ТекущаяСтрока <> Неопределено Тогда
	
		Индекс = Форма.АлгоритмыСбораДанных.Индекс(Элементы.АлгоритмыСбораДанных.ТекущиеДанные);
		Форма.ТекстДобавитьИзменитьОтбор = 
			ПредставлениеГиперссылокОтбора.Получить(Форма.АлгоритмыСбораДанных[Индекс].ОтборЗадан);
	Иначе
		Форма.ТекстДобавитьИзменитьОтбор = ПредставлениеГиперссылокОтбора.Получить(Ложь);	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТекущиеИзмененияАлгоритма()
	
	ТекСтрокаАлгоритма = АлгоритмыСбораДанных.НайтиСтроки(Новый Структура("Ссылка", ТекущийАлгоритм));
	Если ТекСтрокаАлгоритма.Количество()>0 Тогда
		Если Не ТекСтрокаАлгоритма[0].Ссылка.Пустая() Тогда
			Алгоритм = ТекущийАлгоритм.ПолучитьОбъект();
		Иначе
			Алгоритм = Справочники.АлгоритмыСбораДанныхБухОтчетности.СоздатьЭлемент();
			Если Не ТекСтрокаАлгоритма[0].Графа.Пустая() Тогда
				Алгоритм.Владелец = ТекСтрокаАлгоритма[0].Графа;
			Иначе
				Алгоритм.Владелец = Объект.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ОтборЗадан = ОтборУстановлен(НастройкиОтбора);
		
		Алгоритм.НаименованиеРасшифровки = ТекСтрокаАлгоритма[0].НаименованиеРасшифровки;
		Алгоритм.АвтоматическаяРасшифровка = ТекСтрокаАлгоритма[0].АвтоматическаяРасшифровка;
		Алгоритм.ВидДвиженияДенежныхСредств = ТекСтрокаАлгоритма[0].ВидДвиженияДенежныхСредств;
		Алгоритм.ТипПоказателя = ТипПоказателя;
		Алгоритм.Вычитаемый = Вычитаемый;
		Алгоритм.ОтборЗадан = ОтборЗадан;
		Алгоритм.Счета.Очистить();
		Алгоритм.КорСчета.Очистить();
		Для Каждого Счет Из Счета Цикл
			СтрокаСчет = Алгоритм.Счета.Добавить();
			СтрокаСчет.Счет = Счет.Значение;
		КонецЦикла;
		Для Каждого Счет Из КорСчета Цикл
			СтрокаСчет = Алгоритм.КорСчета.Добавить();
			СтрокаСчет.Счет = Счет.Значение;
		КонецЦикла;
		Если ОтборЗадан Тогда
			Алгоритм.НастройкиОтбора = Новый ХранилищеЗначения(
				НастройкиОтбора.ПолучитьНастройки());
		Иначе
			Алгоритм.НастройкиОтбора = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		Алгоритм.Наименование = Справочники.АлгоритмыСбораДанныхБухОтчетности.СформироватьНаименованиеАлгоритма(Алгоритм);
		
		Алгоритм.Записать();

		ТекСтрокаАлгоритма[0].ТипПоказателя = ТипПоказателя;
		ТекСтрокаАлгоритма[0].Вычитаемый = Вычитаемый;
		ТекСтрокаАлгоритма[0].Счета.Загрузить(Алгоритм.Счета.Выгрузить());
		ТекСтрокаАлгоритма[0].КорСчета.Загрузить(Алгоритм.КорСчета.Выгрузить());
		ТекСтрокаАлгоритма[0].ОтборЗадан = ОтборЗадан;
		ТекСтрокаАлгоритма[0].Ссылка = Алгоритм.Ссылка;
		
		АлгоритмИзменен = Ложь;
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьФормуДаннымиАлгоритма()
	
	Счета.Очистить();
	КорСчета.Очистить();
	Вычитаемый = Ложь;
	ТипПоказателя = "";
	
	НастройкиОтбора.Настройки.Отбор.Элементы.Очистить();
	
	ТекущийАлгоритм = Неопределено;
	АлгоритмИзменен = Ложь;
	
	Алгоритм = Элементы.АлгоритмыСбораДанных.ТекущиеДанные;
	Если Алгоритм = Неопределено И АлгоритмыСбораДанных.Количество()>0 Тогда
		Алгоритм = АлгоритмыСбораДанных[0];
	КонецЕсли;
	
	Если Алгоритм <> Неопределено Тогда

		ТипПоказателя = Алгоритм.ТипПоказателя;
		Вычитаемый = Алгоритм.Вычитаемый;
		ТекущийАлгоритм = Алгоритм.Ссылка;
		Если Элементы.Графы.ТекущаяСтрока <> Неопределено Тогда
			Алгоритм.Графа = Элементы.Графы.ТекущаяСтрока;
		КонецЕсли;
		
		Для Каждого СтрокаСчет Из Алгоритм.Счета Цикл
			Счета.Добавить(СтрокаСчет.Счет);
		КонецЦикла;
		Для Каждого СтрокаСчет Из Алгоритм.КорСчета Цикл
			КорСчета.Добавить(СтрокаСчет.Счет);
		КонецЦикла; 
		
		Если Не Алгоритм.ОтборНедоступен Тогда
			Если Алгоритм.ОтборЗадан Тогда
				 ИнициализироватьНастройкиОтбора(НастройкиОтбора, Алгоритм.Ссылка);
			 КонецЕсли;
			УстановитьВидимостьОтбора(Истина);
		Иначе
			УстановитьВидимостьОтбора(Ложь);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнициализироватьНастройкиОтбора(НастройкиОтбора, Ссылка)
	
	НастройкиКомпоновщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НастройкиОтбора").Получить();
	Если Не НастройкиКомпоновщика = Неопределено Тогда
		НастройкиОтбора.ЗагрузитьНастройки(НастройкиКомпоновщика);		
	КонецЕсли;

КонецПроцедуры

// Формирует структуру с параметрами открытия формы настройки отбора.
// Возвращаемое значение:
//	Структура - параметры открытия формы отбора.
&НаСервере
Функция ПараметрыОткрытияНастройкиОтборов()
		
	ПараметрыОткрытия = Новый Структура;
	Если ТипПоказателя = "ОБ" Тогда
		ПараметрыОткрытия.Вставить("ИмяСхемы", "НастройкиОтбораПоСчетамКорСчетам");
		ПараметрыОткрытия.Вставить("КорСчета", ОбщегоНазначенияКлиентСервер.СвернутьМассив(КорСчета.ВыгрузитьЗначения()));
	Иначе
		ПараметрыОткрытия.Вставить("ИмяСхемы", "НастройкиОтбораПоСчетам");
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ИмяНастроекКомпоновщика", "НастройкиОтбора");
	ПараметрыОткрытия.Вставить("НеНастраиватьПараметры", Истина);
	ПараметрыОткрытия.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("Счета", ОбщегоНазначенияКлиентСервер.СвернутьМассив(Счета.ВыгрузитьЗначения()));
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("НастройкиОтбора", НастройкиОтбора);

	Адреса = Справочники.АлгоритмыСбораДанныхБухОтчетности.ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(ПараметрыОткрытия);

	ПараметрыОткрытия.Вставить("СхемаКомпоновкиДанных", Адреса.СхемаКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("НастройкиКомпоновкиДанных", Адреса.НастройкиКомпоновкиДанных);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяНастроекКомпоновщика].ЗагрузитьНастройки(
		ПолучитьИзВременногоХранилища(Результат));
		
	Индекс = АлгоритмыСбораДанных.Индекс(Элементы.АлгоритмыСбораДанных.ТекущиеДанные);
	
	ЗданДоИзменения = АлгоритмыСбораДанных[Индекс].ОтборЗадан;
	
	АлгоритмыСбораДанных[Индекс].ОтборЗадан = 
		ОтборУстановлен(НастройкиОтбора);
		
	АлгоритмИзменен = ЗданДоИзменения ИЛИ
		АлгоритмыСбораДанных[Индекс].ОтборЗадан;
		
	Если АлгоритмИзменен Тогда
		ОбновитьРасшифровкуСлагаемого();
	КонецЕсли;
	
	НастроитьЗаголовкиПолей(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбновитьСхемуОтборов()
	
	АлгоритмИзменен = Истина;
	
	ПараметрыОткрытияНастроек = ПараметрыОткрытияНастройкиОтборов();
	Схема = Справочники.АлгоритмыСбораДанныхБухОтчетности.ОбновитьСхемуОтборов(
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(Счета.ВыгрузитьЗначения()),
		Справочники.АлгоритмыСбораДанныхБухОтчетности.ПолучитьМакет(ПараметрыОткрытияНастроек.ИмяСхемы));
		
	Если ТипПоказателя = "ОБ" Тогда
		Схема = Справочники.АлгоритмыСбораДанныхБухОтчетности.ОбновитьСхемуОтборов(
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(КорСчета.ВыгрузитьЗначения()),
			Схема, "КорСубконто");	
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
		НастройкиОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		НастройкиОтбора.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
		
	ОбновитьРасшифровкуСлагаемого();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборУстановлен(НовыеНастройки)
	
	ОтборУстановлен = Ложь;
	НастройкиКомпоновщика = НовыеНастройки.ПолучитьНастройки();
	Для Каждого ЭлементОтбора Из НастройкиКомпоновщика.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			
			ОтборУстановлен = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараметрДанных Из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		
		Если (ТипЗнч(ПараметрДанных.Значение) = Тип("Булево") 
			И ПараметрДанных.Значение) Или ОтборУстановлен Тогда
			
			ОтборУстановлен = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтборУстановлен;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеАлгоритмы()
	
	Элементы.ДопАлгоритм.СписокВыбора.Добавить("-", НСтр("ru = 'Заполнение значения со знаком минус (-)';
														|en = 'Fill in values with negative sign (-)'"));
	Если Объект.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС Тогда
		Элементы.ДопАлгоритм.СписокВыбора.Добавить("ОДДС", НСтр("ru = 'Заполнение с отбором по виду движения денежных средств';
																|en = 'Fill in with the filter by cash flow kind'"));
		Элементы.ДопАлгоритм.СписокВыбора.Добавить("ОДДС_НДС", НСтр("ru = 'Заполнение с отбором по виду движения денежных средств с исключением НДС при сборе данных';
																	|en = 'Fill in with the filter by cash flow kind excluding VAT upon data collection'"));
		Элементы.ДопАлгоритм.СписокВыбора.Добавить("ОДДС_Агентские", НСтр("ru = 'Заполнение с отбором по виду движения денежных средств с исключением денежных потоков по посредническим операциям';
																			|en = 'Fill in with the filter by cash flow kind excluding cash flow of intermediary transactions'"));
	ИначеЕсли Объект.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения1 Тогда
		Элементы.ДопАлгоритм.СписокВыбора.Добавить("НМАСПогашеннойСтоимостью", НСтр("ru = 'Количество НМА с погашенной стоимостью';
																					|en = 'Quantity of intangible assets with repaid cost'"));
		Элементы.ДопАлгоритм.СписокВыбора.Добавить("ПервоначальнаяСтоимостьНМА", НСтр("ru = 'Заполнение с учетом первоначальной стоимости';
																						|en = 'Fill in considering the initial cost'"));
	ИначеЕсли Объект.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения2 Тогда
		Элементы.ДопАлгоритм.СписокВыбора.Добавить("МодернизацияОС", НСтр("ru = 'Отбор по документам ""Модернизация ОС"" с видом события с ОС ""Модернизация""';
																			|en = 'Filter by the ""Fixed assets — Cost additions"" documents with event kind with FA ""Cost additions""'"));
	ИначеЕсли Объект.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения6 Тогда
		Элементы.ДопАлгоритм.СписокВыбора.Добавить("Прирост[-]_Уменьшение[+]", НСтр("ru = 'Заполнение строки 5670/5680';
																					|en = 'Fill in line 5670/5680'"));
	КонецЕсли;
	
	ДопАлгоритмыГрафы = Справочники.ГрафыБухОтчетности.ДополнительныеАлгоритмыГраф(Объект.ФормаОтчетности);
	
	Элементы.ДопАлгоритмГрафы.Видимость = Ложь;
	Если ДопАлгоритмыГрафы.Количество()>0 И Объект.ЕстьГрафы Тогда	
		Элементы.ДопАлгоритмГрафы.Видимость = Истина;
		
		Для Каждого Алгоритм Из ДопАлгоритмыГрафы Цикл
			Элементы.ДопАлгоритмГрафы.СписокВыбора.Добавить(Алгоритм.Ключ, Алгоритм.Значение);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюЭлементовФормы()

	Если Объект.ЕстьГрафы Тогда
		АлгоритмЗаполненияЗаголовок = НСтр("ru = 'Графы и алгоритм заполнения';
											|en = 'Columns and filling algorithm'");
	Иначе
		АлгоритмЗаполненияЗаголовок = НСтр("ru = 'Алгоритм заполнения';
											|en = 'Filling algorithm'");
	КонецЕсли;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АлгоритмЗаполнения", "Заголовок", АлгоритмЗаполненияЗаголовок);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Графы", "Видимость", Объект.ЕстьГрафы);
	
	ДопАлгоритмНМА = Объект.ДопАлгоритм = "НМАСПогашеннойСтоимостью" ИЛИ Объект.ДопАлгоритм = "ПервоначальнаяСтоимостьНМА";
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлагаемые", "Доступность", Не ДопАлгоритмНМА);
	
	ВидимостьВидДДС = Объект.ФормаОтчетности = ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.ОДДС") 
		И СтрНачинаетсяС(Объект.ДопАлгоритм, "ОДДС");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АлгоритмыСбораДанныхВидДвиженияДенежныхСредств", "Видимость", ВидимостьВидДДС);
	
	ВидимостьКодСтрокиПрошлогоПериода = Объект.ФормаОтчетности = ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.Пояснения1")
		ИЛИ Объект.ФормаОтчетности = ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.Пояснения2")
		ИЛИ Объект.ФормаОтчетности = ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.Пояснения4");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодСтрокиПрошлогоПериода", "Видимость", ВидимостьКодСтрокиПрошлогоПериода);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОсновнаяСтрока", "Видимость", Не Объект.ЭтоОсновнаяСтрока);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ГруппаГрафы");
	МассивИменЭлементов.Добавить("АлгоритмыСбораДанных");
	МассивИменЭлементов.Добавить("ГруппаТипПоказателя");
	МассивИменЭлементов.Добавить("ГруппаКорСчета");
	МассивИменЭлементов.Добавить("ГруппаНастройкиОтбора");
	МассивИменЭлементов.Добавить("ТекстДобавитьИзменитьОтбор");
	МассивИменЭлементов.Добавить("АлгоритмыСбораДанныхАвтоматическаяРасшифровка");
	МассивИменЭлементов.Добавить("ДопАлгоритм");
	
	ЭтоПояснения5 = Объект.ФормаОтчетности = ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.Пояснения5");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", НЕ ЭтоПояснения5);
	
	Если ЭтоПояснения5 Тогда   
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПримечание", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАлгоритмы", "РастягиватьПоГоризонтали", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАлгоритмыДетальнаяИнформация", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Право);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлагаемые", "Заголовок", "");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлагаемые", "Отображение", ОтображениеОбычнойГруппы.Нет);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлагаемые", "РастягиватьПоГоризонтали", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСчета", "РастягиватьПоГоризонтали", Истина);
		Элементы.ГруппаСчета.Показать();
	КонецЕсли;
	
	УстановитьДоступностьЭлементовНастройкиАлгоритмов();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОтбора(Значение)

	Если Значение = Истина И Объект.ФормаОтчетности = ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.ОДДС") Тогда
		  Значение = Не СтрНачинаетсяС(Объект.ДопАлгоритм, "ОДДС");
	КонецЕсли;
	
	Если Объект.ФормаОтчетности = ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.Пояснения5") Тогда
		Значение = Ложь;
	КонецЕсли;

    ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТекстДобавитьИзменитьОтбор", "Видимость", Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуПоНастройкамАлгоритма()
	
	Отказ = Ложь;
	
	Если АлгоритмИзменен Тогда 
		
		ВыполнитьПроверкуАлгоритмаПередЗаписью(Отказ);
		
		Если Не Отказ Тогда
			ЗаписатьТекущиеИзмененияАлгоритма();
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаполнитьФормуДаннымиАлгоритма();
		НастроитьЗаголовкиПолей(ЭтотОбъект);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДоступностьРедактированияРасшифровки", 0.2, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасшифровкуСлагаемого()

	ТекСтрокаАлгоритма = АлгоритмыСбораДанных.НайтиСтроки(Новый Структура("Ссылка", ТекущийАлгоритм));
	Если ТекСтрокаАлгоритма.Количество() > 0 Тогда
		
		Отборы = Неопределено;
		Если Не ТекСтрокаАлгоритма[0].ВидДвиженияДенежныхСредств.Пустая() Тогда
			Отборы = ТекСтрокаАлгоритма[0].ВидДвиженияДенежныхСредств;
		Иначе
			Макет = ?(КорСчета.Количество()>0, "НастройкиОтбораПоСчетамКорСчетам", "НастройкиОтбораПоСчетам");
			
			СхемаКомпоновки = Справочники.АлгоритмыСбораДанныхБухОтчетности.ПолучитьМакет(Макет);
			
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора.Настройки);

			Отборы = КомпоновщикНастроек.ПолучитьНастройки();
		КонецЕсли;
		
		ТекСтрокаАлгоритма[0].НаименованиеРасшифровки = Справочники.АлгоритмыСбораДанныхБухОтчетности.СформироватьРасшифровкуАлгоритма(
			ТипПоказателя,
			Счета.ВыгрузитьЗначения(),
			КорСчета.ВыгрузитьЗначения(),
			Отборы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьРедактированияРасшифровки()

	Если Элементы.АлгоритмыСбораДанных.ТекущийЭлемент <> Неопределено И Элементы.АлгоритмыСбораДанных.ТекущиеДанные <> Неопределено  Тогда
		Элементы.АлгоритмыСбораДанных.ТекущийЭлемент.РедактированиеТекста = Не Элементы.АлгоритмыСбораДанных.ТекущиеДанные.АвтоматическаяРасшифровка;
		Если Не Элементы.АлгоритмыСбораДанных.ТекущийЭлемент.РедактированиеТекста И АлгоритмИзменен Тогда
			 ОбновитьРасшифровкуСлагаемого();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьГрафы(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафыБухОтчетности.Наименование КАК Наименование,
		|	ГрафыБухОтчетности.КодГрафы КАК КодГрафы,
		|	ГрафыБухОтчетности.ДопАлгоритм КАК ДопАлгоритм,
		|	ГрафыБухОтчетности.КодГода КАК КодГода,
		|	ГрафыБухОтчетности.НеЗаполняется КАК НеЗаполняется
		|ИЗ
		|	Справочник.ГрафыБухОтчетности КАК ГрафыБухОтчетности
		|ГДЕ
		|	ГрафыБухОтчетности.Владелец = &Владелец
		|	И НЕ ГрафыБухОтчетности.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Объект.ОсновнаяСтрока);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 Графа = Справочники.ГрафыБухОтчетности.СоздатьЭлемент();
		 ЗаполнитьЗначенияСвойств(Графа, ВыборкаДетальныеЗаписи);
		 Графа.Владелец = Ссылка;
		 Графа.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовНастройкиАлгоритмов()
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ГруппаТипПоказателя");
	МассивИменЭлементов.Добавить("ГруппаКорСчета"); 
	МассивИменЭлементов.Добавить("ГруппаНастройкиОтбора");
	МассивИменЭлементов.Добавить("ТекстДобавитьИзменитьОтбор");
	МассивИменЭлементов.Добавить("АлгоритмыСбораДанныхАвтоматическаяРасшифровка");
	МассивИменЭлементов.Добавить("АлгоритмыСбораДанныхВидДвиженияДенежныхСредств");
	Если Объект.ФормаОтчетности <> ПредопределенноеЗначение("Перечисление.ФормыБухгалтерскойОтчетности.Пояснения5") Тогда
		МассивИменЭлементов.Добавить("ГруппаСчета");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Доступность", АлгоритмыСбораДанных.Количество()>0);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПустойАлгоритм(Ссылка)
	
	Алгоритм = Справочники.АлгоритмыСбораДанныхБухОтчетности.СоздатьЭлемент();
	Алгоритм.Владелец = Ссылка;
	Справочники.АлгоритмыСбораДанныхБухОтчетности.СформироватьНаименованиеАлгоритма(Алгоритм);
	Алгоритм.Записать();
	
	ТекАлгоритм = АлгоритмыСбораДанных.Добавить();
	ТекАлгоритм.Ссылка = Алгоритм.Ссылка;
	ТекАлгоритм.Наименование = Алгоритм.Наименование;
	
	ТекущийАлгоритм = Алгоритм.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуАлгоритмаПередЗаписью(Отказ, ВыдаватьСообщение = Истина)

	Если ТипПоказателя = "ОБ" И КорСчета.Количество() = 0 Тогда
		
		Отказ = Истина;
		
		Если ВыдаватьСообщение Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для типа показателя ""Оборот"" необходимо указать хотя бы один кор. счет.';
					|en = 'Specify at least one correspondent account for the ""Turnover"" indicator type.'"),,
				"КорСчета"); 
		КонецЕсли;
		
		ТекСтрокаАлгоритма = АлгоритмыСбораДанных.НайтиСтроки(Новый Структура("Ссылка", ТекущийАлгоритм));
		
		Если ЗначениеЗаполнено(ТекСтрокаАлгоритма[0].Графа) Тогда
			Элементы.Графы.ТекущаяСтрока = ТекСтрокаАлгоритма[0].Графа;
		КонецЕсли;
		Элементы.АлгоритмыСбораДанных.ТекущаяСтрока = ТекСтрокаАлгоритма[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
