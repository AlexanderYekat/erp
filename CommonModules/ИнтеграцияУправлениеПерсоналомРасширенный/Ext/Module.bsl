
#Область СлужебныеПроцедурыИФункции

#Область ОпределениеТипов

Функция ТипГрафикРаботыСсылка() Экспорт

	Возврат Тип("СправочникСсылка.ГрафикиРаботыСотрудников");

КонецФункции

Функция ТипСборГрафиковОтпусковСсылка() Экспорт

	Возврат Тип("ДокументСсылка.СборГрафиковОтпусков");

КонецФункции

Функция ТипЗаявкаОстаткиОтпусковСсылка() Экспорт

	Возврат Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаСправкаОстаткиОтпусков");

КонецФункции 

Функция ТипЗаявкаСправкаСМестаРаботыСсылка() Экспорт

	Возврат Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаСправкаСМестаРаботы");

КонецФункции 

Функция ТипЗаявкаОтсутствиеСсылка() Экспорт

	Возврат Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаОтсутствие");

КонецФункции

Функция ТипЗаявкаДСВСсылка() Экспорт

	Возврат Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы");

КонецФункции

Функция ТипВидПредоставляемойСотрудникамСправкиСсылка() Экспорт
	
	ТипЗначения = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		ТипЗначения = МодульСамообслуживаниеСотрудников.ТипСсылкаВидыПредоставляемыхСотрудникамСправок();
	КонецЕсли;
	
	Возврат ТипЗначения;
	
КонецФункции

Функция ТипВидыПредоставляемыхСотрудникамСправокОбъект() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Возврат МодульСамообслуживаниеСотрудников.ТипОбъектВидыПредоставляемыхСотрудникамСправок();
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область МенеджерыОбъектов

Функция МенеджерПеречисленияСостоянияСбораГрафиковОтпусков() Экспорт

	Возврат Перечисления.СостоянияСбораГрафиковОтпусков;

КонецФункции 

#КонецОбласти

#Область ПолучениеДанных

Функция ДанныеПодразделений(Подразделения, Приложение) Экспорт

	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат ДанныеСтруктурыЮридическихЛиц(Подразделения, Приложение);
	Иначе
		Возврат ДанныеСтруктурыПредприятия(Подразделения, Приложение);
	КонецЕсли;

КонецФункции

Функция ДанныеСтруктурыПредприятия(Подразделения, Приложение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Подразделение,
	|	СтруктураПредприятия.Код КАК Код,
	|	СтруктураПредприятия.Наименование КАК Наименование,
	|	СтруктураПредприятия.Родитель КАК Родитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Руководитель,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Источник.РеквизитДопУпорядочиванияИерархического, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Порядок,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.Организации
	|			ТОГДА СтруктураПредприятия.Источник
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА СтруктураПредприятия.Источник.Владелец
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&Подразделения)";
	ДанныеПодразделений = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(ДанныеПодразделений) Тогда
		Возврат ДанныеПодразделений;
	КонецЕсли;
	
	ВыгружаемыеФизическиеЛица = ВыгружаемыеФизическиеЛица(Приложение);
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПодразделений, "Организация", Истина);
	РуководителиОрганизаций = Новый Соответствие;
	СведенияОРуководителях = ИнтеграцияУправлениеПерсоналом.СведенияОРуководителяхОрганизаций(Организации);
	Для Каждого Организация Из Организации Цикл
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеРуководителя = СведенияОРуководителях[Организация];
		Если ВыгружаемыеФизическиеЛица[ДанныеРуководителя.Руководитель] <> Неопределено Тогда
			РуководителиОрганизаций.Вставить(Организация, ДанныеРуководителя.Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	ПорядокОрганизаций = ПорядокОрганизаций();
	ИсходныеПодразделения = ДанныеПодразделений.ВыгрузитьКолонку("Подразделение");
	ДанныеРуководителей = РуководителиПодразделений(ИсходныеПодразделения, ВыгружаемыеФизическиеЛица);
	
	Для Каждого СтрокаТаблицы Из ДанныеПодразделений Цикл
		ПорядокОрганизации = ПорядокОрганизаций[СтрокаТаблицы.Организация];
		ПорядокПодразделения = СтрокаТаблицы.Порядок;
		Если ЗначениеЗаполнено(ПорядокОрганизации) Тогда
			СтрокаТаблицы.Порядок = ПорядокОрганизации + ПорядокПодразделения;
		КонецЕсли;
		СтрокаТаблицы.Руководитель = ДанныеРуководителей[СтрокаТаблицы.Подразделение];
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Руководитель) Тогда
			СтрокаТаблицы.Руководитель = РуководителиОрганизаций[СтрокаТаблицы.Организация];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПодразделений;
	
КонецФункции

Функция ДанныеСтруктурыЮридическихЛиц(Подразделения, Приложение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	""0000"" КАК Код,
	|	Организации.Наименование КАК Наименование,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеРодитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Руководитель,
	|	"""" КАК Порядок,
	|	Организации.Ссылка КАК Организация,
	|	ИСТИНА КАК ЭтоОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Подразделения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подразделения.Ссылка,
	|	Подразделения.Код,
	|	Подразделения.Наименование,
	|	Подразделения.Родитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|	Подразделения.РеквизитДопУпорядочиванияИерархического,
	|	Подразделения.Владелец,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.Ссылка В(&Подразделения)";
	ДанныеПодразделений = Запрос.Выполнить().Выгрузить();
	
	Если Не ЗначениеЗаполнено(ДанныеПодразделений) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ВыгружаемыеФизическиеЛица = ВыгружаемыеФизическиеЛица(Приложение);
	
	ОрганизацииРуководители = Новый Соответствие;
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПодразделений, "Организация", Истина);
	СведенияОРуководителях = ИнтеграцияУправлениеПерсоналом.СведенияОРуководителяхОрганизаций(Организации);
	Для Каждого Организация Из Организации Цикл
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеРуководителя = СведенияОРуководителях[Организация];
		Если ВыгружаемыеФизическиеЛица[ДанныеРуководителя.Руководитель] <> Неопределено Тогда
			ОрганизацииРуководители.Вставить(Организация, ДанныеРуководителя.Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПодразделений = ДанныеПодразделений.Скопировать(Новый Структура("ЭтоОрганизация", Ложь));
	ПодразделенияОрганизаций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПодразделений, "Ссылка", Истина);
	ПодразделенияРуководители = РуководителиПодразделенийОрганизаций(ПодразделенияОрганизаций, ВыгружаемыеФизическиеЛица);
	
	ДанныеПодразделений.Колонки.Добавить("Подразделение");
	ДанныеПодразделений.Колонки.Добавить("Родитель");

	ПорядокОрганизаций = ПорядокОрганизаций();
	Для Каждого СтрокаТЗ Из ДанныеПодразделений Цикл
		
		СтрокаТЗ.Подразделение 	= СтрокаТЗ.Ссылка;
		СтрокаТЗ.Родитель 		= СтрокаТЗ.ПодразделениеРодитель;
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Родитель) Тогда
			СтрокаТЗ.Родитель = СтрокаТЗ.Организация;
		КонецЕсли;
		
		ПорядокОрганизации = ПорядокОрганизаций[СтрокаТЗ.Организация];
		ПорядокПодразделения = СтрокаТЗ.Порядок;
		Если ЗначениеЗаполнено(ПорядокОрганизации) Тогда
			СтрокаТЗ.Порядок = ПорядокОрганизации + ПорядокПодразделения;
		КонецЕсли;
		
		СтрокаТЗ.Руководитель = ПодразделенияРуководители[СтрокаТЗ.Ссылка];
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Руководитель) Тогда
			СтрокаТЗ.Руководитель = ОрганизацииРуководители[СтрокаТЗ.Организация];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеПодразделений
	
КонецФункции

Функция ДанныеШтатногоРасписания(ПозицииШР) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПозицииШР", ПозицииШР);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	ШтатноеРасписание.Наименование КАК Наименование,
	|	ШтатноеРасписание.Подразделение КАК ПодразделениеОрганизации
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&ПозицииШР)";
	ДанныеШтатногоРасписания = Запрос.Выполнить().Выгрузить();
	
	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		
		ДанныеШтатногоРасписания.Колонки.ПодразделениеОрганизации.Имя = "Подразделение";
		
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = МодульОрганизационнаяСтруктура.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц();
		КонецЕсли;
		
		Если Не СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц Тогда
			Шаблон = "%1 /%2/";
			Для каждого СтрокаТЗ Из ДанныеШтатногоРасписания Цикл
				СтрокаТЗ.Наименование = СтрШаблон(Шаблон, Строка(СтрокаТЗ.Должность), Строка(СтрокаТЗ.Подразделение));
			КонецЦикла;
		КонецЕсли;

	Иначе
		
		ДанныеШтатногоРасписания.Колонки.Добавить("Подразделение");
		
		МестаПозицийВСтруктуреПредприятия = МестаПозицийВСтруктуреПредприятия(ДанныеШтатногоРасписания.ВыгрузитьКолонку("ДолжностьПоШтатномуРасписанию"));
		ПодразделенияПозиций = Новый Соответствие;
		Для каждого СтрокаТЗ Из МестаПозицийВСтруктуреПредприятия Цикл
			ПодразделенияПозиций.Вставить(СтрокаТЗ.Позиция, СтрокаТЗ.Подразделение);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ДанныеШтатногоРасписания Цикл
			СтрокаТЗ.Подразделение = ПодразделенияПозиций[СтрокаТЗ.ДолжностьПоШтатномуРасписанию];
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеШтатногоРасписания;
	
КонецФункции 

Функция ДанныеСотрудников(Сотрудники) Экспорт
	
	ВедетсяШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	
	ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,Должность,ДатаПриема,
	|РабочееМестоПериодРегистрации,ВидЗанятости,ТарифнаяСтавка,ПоказательТарифнойСтавки,ВидСобытия,ГрафикРаботы";
	Если ВедетсяШтатноеРасписание Тогда
		Если ПубликоватьСтруктуруЮридическихЛиц Тогда
			ВыбираемыеПоля = ВыбираемыеПоля + ",ДолжностьПоШтатномуРасписанию,Подразделение";
		Иначе
			ВыбираемыеПоля = ВыбираемыеПоля + ",ДолжностьПоШтатномуРасписанию,МестоВСтруктуреПредприятия";
		КонецЕсли;
	Иначе
		ВыбираемыеПоля = ВыбираемыеПоля + ",Подразделение";
	КонецЕсли;
	
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, ВыбираемыеПоля, ТекущаяДатаСеанса());
	ТаблицаДанных.Колонки.ПоказательТарифнойСтавки.Имя = "Показатель";
	ТаблицаДанных.Колонки.Добавить("ПоказательТарифнойСтавки");
	ТаблицаДанных.Колонки.ТарифнаяСтавка.Имя = "РазмерТарифнойСтавки";
	
	Если ВедетсяШтатноеРасписание И Не ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТаблицаДанных.Колонки.МестоВСтруктуреПредприятия.Имя = "Подразделение";
	КонецЕсли;
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "Показатель", Истина);
	ПоказателиКВыгрузке = Новый Массив;
	Для каждого Показатель Из Показатели Цикл
		Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда
			ПоказателиКВыгрузке.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	ПоказательПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПоказателиКВыгрузке,"КраткоеНаименование");
	
	ПозицииСотрудников = Новый Соответствие;
	ПодразделенияПозиций = Новый Соответствие;
	Если Не ВедетсяШтатноеРасписание Тогда
		
		ТаблицаДанных.Колонки.Добавить("ДолжностьПоШтатномуРасписанию");
		ТаблицаДанных.Колонки.Подразделение.Имя = "ПодразделениеОрганизации";
		ТаблицаДанных.Колонки.Добавить("Подразделение");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.ПодразделениеОрганизации КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
		|	КадровыеДанные.Подразделение КАК Подразделение
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
			ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
			ПодразделенияПозиций.Вставить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию, СтрокаТЗ.Подразделение);
		КонецЦикла;
		
		Если Не ПубликоватьСтруктуруЮридическихЛиц Тогда
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
			СтруктураПредприятия = МестаПозицийВСтруктуреПредприятия(Позиции);
			Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
				ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		ПоказательТарифнойСтавки = ПоказательПредставление[СтрокаТЗ.Показатель];
		СтрокаТЗ.ПоказательТарифнойСтавки = ?(ПоказательТарифнойСтавки = Неопределено,"",ПоказательТарифнойСтавки);
		Если Не ВедетсяШтатноеРасписание Тогда
			СтрокаТЗ.ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
			СтрокаТЗ.Подразделение = ПодразделенияПозиций[СтрокаТЗ.ДолжностьПоШтатномуРасписанию];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ДанныеГрафиковРаботыСотрудников(ГрафикиРаботыСотрудников, Приложение) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикиРаботы", ГрафикиРаботыСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы,
	|	ГрафикиРаботы.Наименование КАК Наименование,
	|	ГрафикиРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Ссылка В(&ГрафикиРаботы)";
	ДанныеГрафиковРаботы = Запрос.Выполнить().Выгрузить(); 
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		
		ДанныеГрафиковРаботы.Колонки.Добавить("ПраздничныеДни");
		ДанныеГрафиковРаботы.Индексы.Добавить("ПроизводственныйКалендарь");
		Отбор = Новый Структура("ПроизводственныйКалендарь");
		
		ПроизводственныеКалендари = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеГрафиковРаботы, "ПроизводственныйКалендарь", Истина);
		Запрос.УстановитьПараметр("ПроизводственныеКалендари", ПроизводственныеКалендари);
		Запрос.УстановитьПараметр("НачальныйГод", Год(ТекущаяДатаСеанса()) - 1);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ДанныеПроизводственногоКалендаря.Год КАК Год,
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь В(&ПроизводственныеКалендари)
		|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|	И ДанныеПроизводственногоКалендаря.Год >= &НачальныйГод
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизводственныйКалендарь,
		|	Год,
		|	Дата";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДанныеГрафиков = Новый Массив;
		Пока Выборка.СледующийПоЗначениюПоля("ПроизводственныйКалендарь") Цикл
			ПраздничныеДни = Новый Массив;
			Пока Выборка.Следующий() Цикл
				ПраздничныйДень = Новый Структура("Год,Дата");
				ПраздничныйДень.Год 	= Выборка.Год;
				ПраздничныйДень.Дата 	= Выборка.Дата;
				ПраздничныеДни.Добавить(ПраздничныйДень);
			КонецЦикла;
			Отбор.ПроизводственныйКалендарь = Выборка.ПроизводственныйКалендарь;
			НайденныеСтроки = ДанныеГрафиковРаботы.НайтиСтроки(Отбор);
			Для Каждого СтрокаГрафика Из НайденныеСтроки Цикл
				СтрокаГрафика.ПраздничныеДни = ПраздничныеДни;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеГрафиковРаботы;

КонецФункции

#КонецОбласти

#Область РуководителиПодразделений

Функция РуководителиПодразделенийОрганизаций(ИсходныеПодразделения, ВыгружаемыеФизическиеЛица) Экспорт
	
	ПодразделениеРуководитель = Новый Соответствие;
	Если Не ЗначениеЗаполнено(ИсходныеПодразделения) Тогда
		Возврат ПодразделениеРуководитель;
	КонецЕсли;
	
	Подразделения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, ИсходныеПодразделения);
	
	РодителиПодразделений = ИнтеграцияУправлениеПерсоналом.РодителиПодразделений(ИсходныеПодразделения);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
	
	ИерархияПодразделений = ИерархияПодразделений(Подразделения);
	
	ДанныеРуководителей = РуководителиПодразделенийОрганизации.ДанныеРуководителей(Подразделения);
	
	Отбор = Новый Структура("Ссылка");
	Для каждого Подразделение Из ИсходныеПодразделения Цикл
		Руководитель = РуководительСУчетомИерархии(Подразделение, ДанныеРуководителей, ИерархияПодразделений, ВыгружаемыеФизическиеЛица);
		ПодразделениеРуководитель.Вставить(Подразделение, Руководитель);
	КонецЦикла;
	
	Возврат ПодразделениеРуководитель;

КонецФункции

Функция РуководителиПодразделений(ИсходныеПодразделения, ВыгружаемыеФизическиеЛица) Экспорт

	ПодразделениеРуководитель = Новый Соответствие;
	Если Не ЗначениеЗаполнено(ИсходныеПодразделения) Тогда
		Возврат ПодразделениеРуководитель;
	КонецЕсли;
	
	Подразделения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, ИсходныеПодразделения);
	
	РодителиПодразделений = ИнтеграцияУправлениеПерсоналом.РодителиПодразделений(ИсходныеПодразделения);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
	
	ИерархияПодразделений = ИерархияПодразделений(Подразделения);
	
	ДанныеРуководителей = Новый Соответствие;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
		ОписанияРуководителей = Модуль.ДанныеРуководителей(Подразделения);
		Если ЗначениеЗаполнено(ОписанияРуководителей) Тогда
			Для каждого ЭлементКоллекции Из ОписанияРуководителей Цикл
				ДанныеРуководителей.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.ФизическоеЛицо);
			КонецЦикла;
		КонецЕсли;
	Иначе
		КабинетСотрудникаРасширенныйПереопределяемый.ЗаполнитьДанныеРуководителей(ДанныеРуководителей, Подразделения);
	КонецЕсли;
	
	Отбор = Новый Структура("Ссылка");
	Для каждого Подразделение Из ИсходныеПодразделения Цикл
		Руководитель = РуководительСУчетомИерархии(Подразделение, ДанныеРуководителей, ИерархияПодразделений, ВыгружаемыеФизическиеЛица);
		ПодразделениеРуководитель.Вставить(Подразделение, Руководитель);
	КонецЦикла;
	
	Возврат ПодразделениеРуководитель;

КонецФункции

Функция ИерархияПодразделений(Подразделения) Экспорт

	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Подразделения[0]);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Ссылка,
	|	Подразделения.Родитель КАК Родитель
	|ИЗ
	|	#Таблица КАК Подразделения
	|ГДЕ
	|	Подразделения.Ссылка В ИЕРАРХИИ(&Подразделения)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция РуководительСУчетомИерархии(Подразделение, ДанныеРуководителей, ИерархияПодразделений, ВыгружаемыеФизическиеЛица)

	Руководитель = ДанныеРуководителей[Подразделение];
	Если ВыгружаемыеФизическиеЛица[Руководитель] = Неопределено Тогда
		Руководитель = Неопределено;
		НайденнаяСтрока = ИерархияПодразделений.Найти(Подразделение, "Ссылка");
		Родитель = НайденнаяСтрока.Родитель;
		Если ЗначениеЗаполнено(Родитель) Тогда
			Руководитель = РуководительСУчетомИерархии(Родитель, ДанныеРуководителей, ИерархияПодразделений, ВыгружаемыеФизическиеЛица);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Руководитель;

КонецФункции

// Руководители указываются позицией штатного расписания в подразделении организации.
// - ведется штатное расписание
// - структура предприятия соответствует структуре юридических лиц
// - есть подсистема "ЗарплатаКадрыПриложения.РуководителиПодразделений"
// - публикуется структура компании.
//
Функция РассчитыватьПодразделенияРуководителей() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание")
		И Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц")
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений")
		И Не ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	
КонецФункции

Функция ПодразделенияПозицийРуководителей(Позиции) Экспорт
	
	Подразделения = Неопределено;
	
	Если Не ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
			МодульРуководителиПодразделений = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
			Подразделения = МодульРуководителиПодразделений.ПодразделенияПозицийРуководителей(Позиции);
		КонецЕсли;
		Если ЗначениеЗаполнено(Подразделения) Тогда
			ПодчиненныеПодразделения = ПодчиненныеПодразделения(Подразделения);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, ПодчиненныеПодразделения, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подразделения;
	
КонецФункции

Функция ПодразделенияДляПроверкиРуководителей(Организации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО СтруктураПредприятия.Источник = ПодразделенияОрганизаций.Ссылка
	|ГДЕ
	|	(ПодразделенияОрганизаций.Владелец В (&Организации)
	|			ИЛИ СтруктураПредприятия.Источник В (&Организации))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

#КонецОбласти

#Область ШтатноеРасписание

Процедура СоздатьВТШтатноеРасписание(МенеджерВТ, ИспользоватьШтатноеРасписание) Экспорт
	
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Ссылка <> &УправленческаяОрганизация";
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организации", Организации);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Подразделение КАК Подразделение,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	ШтатноеРасписание.Утверждена КАК Утверждена,
	|	ШтатноеРасписание.ДатаУтверждения КАК ДатаУтверждения,
	|	ШтатноеРасписание.Закрыта КАК Закрыта,
	|	ШтатноеРасписание.ДатаЗакрытия КАК ДатаЗакрытия
	|ПОМЕСТИТЬ ВТШтатноеРасписание
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Владелец В(&Организации)
	|	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
	
	Если ИспользоватьШтатноеРасписание Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	Иначе
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ВТШтатноеРасписание", "ВТШтатноеРасписаниеИсходное");
		Запрос.Выполнить();
		
		Для каждого Организация Из Организации Цикл
			УправлениеШтатнымРасписанием.СоздатьПозицииОрганизации(Организация);
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		// новые позиции
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Организация КАК Организация,
		|	ШтатноеРасписание.Подразделение КАК Подразделение,
		|	ШтатноеРасписание.ПозицияШтатногоРасписания КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТШтатноеРасписание КАК ШтатноеРасписание
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтатноеРасписаниеИсходное КАК ШтатноеРасписаниеИсходное
		|		ПО ШтатноеРасписание.ПозицияШтатногоРасписания = ШтатноеРасписаниеИсходное.ПозицияШтатногоРасписания
		|ГДЕ
		|	ШтатноеРасписаниеИсходное.ПозицияШтатногоРасписания ЕСТЬ NULL";
		НовыеПозиции = Запрос.Выполнить().Выгрузить();
		
		Если НовыеПозиции.Количество() > 0 Тогда
			Приложения = ИнтеграцияУправлениеПерсоналом.ИспользуемыеПриложения();
			ИнтеграцияУправлениеПерсоналом.ДополнитьПозицииВПравилах(Приложения, НовыеПозиции, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается, когда не ведется Штатное расписание.
Процедура ПроверитьОбновитьПозиции(Приложения, МенеджерВТ) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыеДанные.Организация КАК Организация,
	|	КадровыеДанные.Подразделение КАК Подразделение,
	|	КадровыеДанные.Должность КАК Должность
	|ПОМЕСТИТЬ ВТНетПозиций
	|ИЗ
	|	ВТКадровыеДанные КАК КадровыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
	|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность
	|ГДЕ
	|	ШтатноеРасписание.Ссылка ЕСТЬ NULL
	|	И КадровыеДанные.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И КадровыеДанные.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НетПозиций.Организация КАК Организация
	|ИЗ
	|	ВТНетПозиций КАК НетПозиций";
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если ЗначениеЗаполнено(Организации) Тогда
		
		Для каждого Организация Из Организации Цикл
			УправлениеШтатнымРасписанием.СоздатьПозицииОрганизации(Организация);
		КонецЦикла;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НетПозицийШР.Организация КАК Организация,
		|	НетПозицийШР.Подразделение КАК Подразделение,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТНетПозиций КАК НетПозицийШР
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО НетПозицийШР.Подразделение = ШтатноеРасписание.Подразделение
		|			И НетПозицийШР.Должность = ШтатноеРасписание.Должность";
		НовыеПозиции = Запрос.Выполнить().Выгрузить();
		ИнтеграцияУправлениеПерсоналом.ДополнитьПозицииВПравилах(Приложения, НовыеПозиции);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПравилаВыгрузки

Процедура ЗарегистрироватьИзмененияГрафиковРаботы(ТаблицаСотрудников, ПриложениеДляОбработки = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ПриложениеДляОбработки = Неопределено Тогда
		Приложения = ИнтеграцияУправлениеПерсоналом.ИспользуемыеПриложения();
	Иначе
		Приложения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПриложениеДляОбработки);
	КонецЕсли;
	
	СписокСотрудников = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.Сотрудник) Тогда
			СписокСотрудников.Добавить(СтрокаТЗ.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса());
	ТаблицаСотрудников.ЗаполнитьЗначения(ДатаАктуальности, "ДатаНачала");
	
	ОписаниеФильтра = 
		ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
			ТаблицаСотрудников, 
			"Сотрудник");
			
	ГрафикиРаботыСотрудников = 
		ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраПериоды(
			"ГрафикРаботыСотрудников",
			Новый МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра);
		
	БудущиеКадровыеСобытия = Новый ТаблицаЗначений;
	БудущиеКадровыеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеКадровыеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	СотрудникГрафик = Новый Соответствие;
	Для каждого СтрокаТЗ Из ГрафикиРаботыСотрудников Цикл
		Если СтрокаТЗ.НачалоПериода > ДатаАктуальности Тогда
			НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
			НоваяСтрока.Сотрудник 	= СтрокаТЗ.Сотрудник;
			НоваяСтрока.ДатаСобытия = СтрокаТЗ.НачалоПериода;
		Иначе
			СотрудникГрафик.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ГрафикРаботы);
		КонецЕсли;
	КонецЦикла; 
	
	ВыгружаемыеСотрудники = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаются(СписокСотрудников);
	
	БудущиеСобытия = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("БудущиеСобытияУправлениеПерсоналом");
	БудущиеСобытия.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево")); 
	ОбъектыДляРегистрацииУП = Неопределено;
	ОбъектыДляРегистрацииКС = Неопределено;
	Для каждого Приложение Из Приложения Цикл
		
		Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.ГрафикРаботы;
		БудущиеСобытияПриложения = ИнтеграцияУправлениеПерсоналом.БудущиеСобытияПриложения(Приложение, СписокСотрудников, БудущиеКадровыеСобытия, Событие);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(БудущиеСобытияПриложения, БудущиеСобытия);
		
		Сотрудники = ВыгружаемыеСотрудники[Приложение];
		Если Не ЗначениеЗаполнено(Сотрудники) Тогда
			Продолжить;
		КонецЕсли;
		
		Графики = Новый Массив;
		Для каждого Сотрудник Из Сотрудники Цикл
			Графики.Добавить(СотрудникГрафик[Сотрудник]);
		КонецЦикла;
		
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			ОбъектыДляРегистрацииУП = ОбъектыДляРегистрацииИзмененияГрафиковРаботы(Приложение, Сотрудники, Графики);
		Иначе
			ОбъектыДляРегистрацииКС = ОбъектыДляРегистрацииИзмененияГрафиковРаботы(Приложение, Сотрудники, Графики);
		КонецЕсли;
		
	КонецЦикла; 
	
	ИнтеграцияУправлениеПерсоналом.ЗарегистрироватьОбъектыДляОбмена(БудущиеСобытия,
			ОбъектыДляРегистрацииУП, ОбъектыДляРегистрацииКС,
			ПриложениеДляОбработки);

КонецПроцедуры

#КонецОбласти 

#Область Прочие

Функция ПодразделениеВСтруктуреПредприятия(ПодразделениеОрганизации) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат Модуль.ПодразделениеВСтруктуреПредприятия(ПодразделениеОрганизации);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ПодчиненныеПодразделения(Подразделения) Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделения) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Подразделения[0]);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Ссылка
	|ИЗ
	|	#Таблица КАК Подразделения
	|ГДЕ
	|	Подразделения.Ссылка В ИЕРАРХИИ(&Подразделения)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Функция ВыгружаемыеФизическиеЛица(Приложение)

	ФизическиеЛица = ИнтеграцияУправлениеПерсоналом.ВыгружаемыеФизическиеЛица(Приложение);
	Возврат ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ФизическиеЛица);

КонецФункции

Функция МестаПозицийВСтруктуреПредприятия(Позиции) Экспорт
	
	СтруктураПредприятия = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = Модуль.МестаПозицийВСтруктуреПредприятия(Позиции);
	КонецЕсли;
	
	Возврат СтруктураПредприятия;

КонецФункции

Функция ПорядокОрганизаций()
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Счетчик = 1;
		Пока Выборка.Следующий() Цикл
			Порядок = ДобавитьЛидирующиеНули(Формат(Счетчик, "ЧГ=0"), 3);
			Результат.Вставить(Выборка.Организация, Порядок);
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(ИсходнаяСтрока, ДлинаСтроки)
	
	ТекстПолный = ИсходнаяСтрока;
	Пока СтрДлина(ТекстПолный) < ДлинаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	
	Возврат ТекстПолный;
	
КонецФункции

// Возвращает подразделения предприятия (структура предприятия), указанные в позициях штатного расписания,
// и родителей этих подразделений.
//
// Параметры:
// 		Позиции - Массив - СправочникСсылка.ШтатноеРасписание.
//
// 	Возвращаемое значение:
// 		Массив - СправочникСсылка.СтруктураПредприятия.
//
Функция ПодразделенияПозиций(Позиции) Экспорт

	ПодразделенияПредприятия = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = Модуль.МестаПозицийВСтруктуреПредприятия(Позиции);
		ПодразделенияПредприятия = ОбщегоНазначения.ВыгрузитьКолонку(СтруктураПредприятия,"Подразделение",Истина);
		ОбщегоНазначенияБЗККлиентСервер.УдалитьПустыеЗначенияИзМассива(ПодразделенияПредприятия);
	КонецЕсли;
	
	Если ПодразделенияПредприятия.Количество() > 0 Тогда
		РодителиПодразделений = ИнтеграцияУправлениеПерсоналом.РодителиПодразделений(ПодразделенияПредприятия);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодразделенияПредприятия, РодителиПодразделений, Истина);
	КонецЕсли;
	
	Возврат ПодразделенияПредприятия;

КонецФункции

Функция ОбъектыДляРегистрацииИзмененияГрафиковРаботы(Приложение, Сотрудники, Графики)
	
	Результат = Новый Структура("ВыгружаемыеОбъекты,ИзмененияДляОбмена");
	
	ОбщегоНазначенияБЗККлиентСервер.УдалитьПустыеЗначенияИзМассива(Сотрудники);
	ОбщегоНазначенияБЗККлиентСервер.УдалитьПустыеЗначенияИзМассива(Графики);
	
	ВыгружаемыеОбъекты = ИнтеграцияУправлениеПерсоналом.НоваяТаблицаВыгружаемыеОбъекты(Приложение);
	ИзмененияДляОбмена = ИнтеграцияУправлениеПерсоналом.НоваяТаблицаИзмененияДляОбмена(Приложение);
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
	Изменения = ИнтеграцияУправлениеПерсоналом.УжеЗарегистрированыДляОбмена(Приложение, Сотрудники, ТипОбъекта);
	СотрудникиКРегистрации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Сотрудники, Изменения);
	Для каждого Сотрудник Из СотрудникиКРегистрации Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 			= Сотрудник;
		НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	ВыгружаемыеГрафики = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаютсяВПриложение(Приложение, Графики);
	ГрафикиКРегистрации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Графики, ВыгружаемыеГрафики);
	Для каждого График Из ГрафикиКРегистрации Цикл
		НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
		НоваяСтрока.Ссылка = График;
	КонецЦикла;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
	Изменения = ИнтеграцияУправлениеПерсоналом.УжеЗарегистрированыДляОбмена(Приложение, Графики, ТипОбъекта);
	ГрафикиКРегистрации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Графики, Изменения);
	Для каждого График Из ГрафикиКРегистрации Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 			= График;
		НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	Результат.ВыгружаемыеОбъекты = ВыгружаемыеОбъекты;
	Результат.ИзмененияДляОбмена = ИзмененияДляОбмена; 
	
	Возврат Результат;

КонецФункции

Процедура ОбновитьСтруктуруПредприятия() Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктураСобытия = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктураСобытия");
		МодульОрганизационнаяСтруктураСобытия.ОбновитьСтруктуруПредприятия(Ложь);
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#КонецОбласти