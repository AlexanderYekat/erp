#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("ИнтеграцияБЗК");
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов - таблиц значений - данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.НачислениеЕНП") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыСФондамиПоСтраховымВзносам(Запрос, ТекстыЗапроса, Регистры);
		//++ НЕ УТКА
		ТекстЗапросаТаблицаОтражениеДокументовВМеждународномУчете(Запрос, ТекстыЗапроса, Регистры);
		//-- НЕ УТКА
		ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыПоНалогамНаЕдиномНалоговомСчете(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Перенос налогов на ЕНС
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	Строки.Сумма КАК Сумма,
	|	Строки.Сумма / КурсВалютыУпрУчета.Курс КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	&ВалютаРеглУчета КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиДт,
	|
	|	Строки.СчетУчета КАК СчетДт,
	|	Строки.Субконто1 КАК СубконтоДт1,
	|	Строки.Субконто2 КАК СубконтоДт2,
	|	Строки.Субконто3 КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	&ВалютаРеглУчета КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеКт,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перенос налогов на ЕНС"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.НачислениеЕНП КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТРасшифровкаНалогов КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НачалоПериода(Операция.Дата, ДЕНЬ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - текст запроса создания временных таблиц.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Строки.Ссылка,
	|	Строки.НомерСтроки,
	|	Строки.СчетУчета,
	|	Строки.Субконто1,
	|	Строки.Субконто2,
	|	Строки.Субконто3,
	|	СУММА(Строки.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТРасшифровкаНалогов
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЕНП.РасшифровкаНалогов КАК Строки
	|	ПО
	|		ДокументыКОтражению.Ссылка = Строки.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Ссылка,
	|	Строки.НомерСтроки,
	|	Строки.СчетУчета,
	|	Строки.Субконто1,
	|	Строки.Субконто2,
	|	Строки.Субконто3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Строки.Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Добавляет команду создания документа "Начисление ЕНП".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.НачислениеЕНП) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.НачислениеЕНП.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.НачислениеЕНП);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Заполнение

Функция ПолучитьНалогиПоДаннымЗарплаты(ПараметрыОтбора) Экспорт
	
	ТаблицаНалогов = ПустаяСсылка().РасшифровкаНалогов.ВыгрузитьКолонки();
	
	Организация = Неопределено;
	ДатаДокумента = '00010101';
	
	Если НЕ (ПараметрыОтбора.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация)
		И ПараметрыОтбора.Свойство("ДатаДокумента", ДатаДокумента) И ЗначениеЗаполнено(ДатаДокумента)) Тогда
		Возврат ТаблицаНалогов;
	КонецЕсли;
	
	ОтборДанныхЗаПервуюПоловинуПериода = ПараметрыОтбора.Свойство("ДанныеПервойПоловиныПериодаПоНДФЛ") И ПараметрыОтбора.ДанныеПервойПоловиныПериодаПоНДФЛ;
	ПериодЗаполнения = ПериодЗаполненияНДФЛ(ДатаДокумента, ОтборДанныхЗаПервуюПоловинуПериода);
	
	УдержаноНалогаЗаПериод = УчетНДФЛ.УдержаноНалогаЗаПериод(
		Организация, ПериодЗаполнения.ДатаНачала, ПериодЗаполнения.ДатаОкончания);
	
	КБКпоНДФЛ = УчетНДФЛ.КБКпоНДФЛ(ПериодЗаполнения.ДатаНачала);
	
	Для Каждого СтрокаТаблицы Из УдержаноНалогаЗаПериод Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сумма) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНалогов.Добавить();
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.КБК) Тогда
			НоваяСтрока.КодБК = СтрокаТаблицы.КБК;
		Иначе
			НоваяСтрока.КодБК = КБКпоНДФЛ.Основной;
		КонецЕсли;
		
		Если НоваяСтрока.КодБК = КБКпоНДФЛ.Основной Тогда
			НоваяСтрока.ТипНалога = Перечисления.ТипыНалогов.НДФЛ;
		ИначеЕсли НоваяСтрока.КодБК = КБКпоНДФЛ.СПревышения Тогда
			НоваяСтрока.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения;
		ИначеЕсли НоваяСтрока.КодБК = КБКпоНДФЛ.Дивиденды Тогда
			НоваяСтрока.ТипНалога = Перечисления.ТипыНалогов.НДФЛДивиденды;
		ИначеЕсли НоваяСтрока.КодБК = КБКпоНДФЛ.ДивидендыСПревышения Тогда
			НоваяСтрока.ТипНалога = Перечисления.ТипыНалогов.НДФЛДивидендыСПревышения;
		Иначе
			НоваяСтрока.ТипНалога = Перечисления.ТипыНалогов.НДФЛ;
		КонецЕсли;
		
		НоваяСтрока.НачалоПериода = ПериодЗаполнения.НачалоПериода;
		НоваяСтрока.КонецПериода = ПериодЗаполнения.КонецПериода;
		НоваяСтрока.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(НоваяСтрока.ТипНалога);
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Субконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
		НоваяСтрока.СрокУплаты = СтрокаТаблицы.СрокПеречисленияНалога;
		НоваяСтрока.Сумма = СтрокаТаблицы.Сумма;
		
	КонецЦикла;
	
	ПараметрыОтбора.Вставить("ДанныеПервойПоловиныПериодаПоНДФЛ", ОтборДанныхЗаПервуюПоловинуПериода);
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаНалогов);
	
	ВычестьУжеЗарегистрированныеДанныеПоНДФЛ(ТаблицаНалогов, ПараметрыОтбора);
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Функция ПолучитьНалогиПоДаннымДекларацийИРасчетов(ПараметрыОтбора) Экспорт
	
	ТаблицаНалогов = ПустаяСсылка().РасшифровкаНалогов.ВыгрузитьКолонки();
	
	Организация = Неопределено;
	ДатаДокумента = '00010101';
	
	Если НЕ (ПараметрыОтбора.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация)
		И ПараметрыОтбора.Свойство("ДатаДокумента", ДатаДокумента) И ЗначениеЗаполнено(ДатаДокумента)) Тогда
		Возврат ТаблицаНалогов;
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("ТипыНалогов") Тогда
		ОтборПоТипамНалогов = ПараметрыОтбора.ТипыНалогов;
	Иначе
		ОтборПоТипамНалогов = Неопределено;
	КонецЕсли;
	
	МесяцНачисления = Месяц(ДатаДокумента);
	ДействующиеРегистрацииВНалоговомОргане = ПолучитьДействующиеРегистрацииВНалоговомОргане(Организация);
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.НДС) <> Неопределено Тогда
		// НДС
		ПериодНачисленияНДС = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
		Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл 
			ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НДС", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияНДС, Истина);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.НалогНаПрибыль_РегиональныйБюджет) <> Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.НалогНаПрибыль_ФедеральныйБюджет) <> Неопределено Тогда
		// Прибыль
		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
				"НастройкиУчетаНалогаНаПрибыль",
				Организация,
				ДатаДокумента,
				Ложь);
		
		Если ПараметрыУчетнойПолитики <> Неопределено Тогда
			
			Если ПараметрыУчетнойПолитики.ПорядокУплатыАвансовПоНалогуНаПрибыль = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежеквартально Тогда
			
				// данные для заполнения берем:
				// * в марте - из годовой декларации предыдущего года,
				// * в апреле, июле, октябре - из декларации предыдущего квартала.
				Если МесяцНачисления = 3
					Или (МесяцНачисления > 1 И МесяцНачисления % 3 = 1) Тогда
					
					ПериодНачисленияПрибыль = КонецКвартала(ДобавитьМесяц(ДатаДокумента, -3));
					Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл
						ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НалогНаПрибыль", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияПрибыль);
						ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
					КонецЦикла;
					
				КонецЕсли;
				
			// прибыль ежемесячно по расчетной 
			ИначеЕсли ПараметрыУчетнойПолитики.ПорядокУплатыАвансовПоНалогуНаПрибыль = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно Тогда
				
				// данные для заполнения берем:
				// * в январе, феврале - из декларации за 9 месяцев предыдущего года (с отбором по месяцу начисления),
				// * в марте - декларации за 9 месяцев (с отбором по месяцу начисления) предыдущего года и из годовой декларации,
				// * остальные месяцы - из декларации предыдущего квартала (с отбором по месяцу начисления).
				
				Если МесяцНачисления = 1
					Или МесяцНачисления = 2 Тогда
					
					ПериодНачисленияПрибыль = ДобавитьМесяц(КонецГода(ДобавитьМесяц(ДатаДокумента, -3)), -3);
					Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл
						ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НалогНаПрибыль", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияПрибыль, Истина);
						ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
					КонецЦикла;
					
				ИначеЕсли МесяцНачисления = 3 Тогда
					
					ПериодНачисленияПрибыль = ДобавитьМесяц(КонецГода(ДобавитьМесяц(ДатаДокумента, -3)), -3);
					Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл
						ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НалогНаПрибыль", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияПрибыль, Истина);
						ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
					КонецЦикла;
					
					ПериодНачисленияПрибыль = КонецГода(ДобавитьМесяц(ДатаДокумента, -3));
					Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл
						ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НалогНаПрибыль", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияПрибыль);
						ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
					КонецЦикла;
					
				Иначе
					
					ПериодНачисленияПрибыль = КонецКвартала(ДобавитьМесяц(ДатаДокумента, -3));
					УчитыватьОтчетныйПериодДляРасчета = УчитыватьОтчетныйПериодДляРасчета(МесяцНачисления);
					Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл
						ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НалогНаПрибыль", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияПрибыль, Истина,
							УчитыватьОтчетныйПериодДляРасчета);
						ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
					КонецЦикла;
					
				КонецЕсли;
				
			// прибыль ежемесячно по фактической
			ИначеЕсли ПараметрыУчетнойПолитики.ПорядокУплатыАвансовПоНалогуНаПрибыль = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли Тогда
				
				// данные для заполнения берем:
				// * в январе - не заполняем,
				// * в феврале - из декларации за предыдущий месяц,
				// * в марте - из декларации за предыдущий месяц и из годовой декларации за прошлый год,
				// * остальные месяцы - из декларации за предыдущий месяц.
					
				Если МесяцНачисления = 2 Тогда
					
					ПериодНачисленияПрибыль = КонецМесяца(ДобавитьМесяц(ДатаДокумента, -1));
					Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл
						ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НалогНаПрибыль", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияПрибыль);
						ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
					КонецЦикла;
					
				ИначеЕсли МесяцНачисления = 3 Тогда
					
					ПериодНачисленияПрибыль = КонецМесяца(ДобавитьМесяц(ДатаДокумента, -1));
					Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл
						ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НалогНаПрибыль", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияПрибыль);
						ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
					КонецЦикла;
					
					ПериодНачисленияПрибыль = КонецГода(ДобавитьМесяц(ДатаДокумента, -3));
					Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл
						ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НалогНаПрибыль", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияПрибыль);
						ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
					КонецЦикла;
					
				ИначеЕсли МесяцНачисления >= 4 Тогда
					
					ПериодНачисленияПрибыль = КонецМесяца(ДобавитьМесяц(ДатаДокумента, -1));
					Для Каждого ТекущаяРегистрацияВНО Из ДействующиеРегистрацииВНалоговомОргане Цикл
						ДанныеДекларации = ДанныеДляУплатыНалогаПоДекларации("НалогНаПрибыль", Организация, ТекущаяРегистрацияВНО, ДатаДокумента, ПериодНачисленияПрибыль);
						ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДекларации.Платежи, ПараметрыОтбора);
					КонецЦикла;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.ЗемельныйНалог) <> Неопределено Тогда
		
		Если МесяцНачисления % 3 = 1 Тогда
			
			ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
			ДанныеРасчета = ДанныеДляУплатыЗемельногоНалога(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.ТранспортныйНалог) <> Неопределено Тогда
		
		Если МесяцНачисления % 3 = 1 Тогда
			
			ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
			ДанныеРасчета = ДанныеДляУплатыТранспортногоНалога(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.НалогНаИмущество) <> Неопределено Тогда
		
		Если МесяцНачисления % 3 = 1 Тогда
			
			ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
			ДанныеРасчета = ДанныеДляУплатыНалогаНаИмущество(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.УСН_Доходы) <> Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.УСН_ДоходыМинусРасходы) <> Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.УСН_МинимальныйНалог) <> Неопределено Тогда
		
		Если МесяцНачисления % 3 = 1 Тогда
			
			ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
			ДанныеРасчета = ДанныеДляУплатыНалогаУСН(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.ТорговыйСбор) <> Неопределено Тогда
		
		ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
		
		Если МесяцНачисления % 3 = 1
			И ТорговыйСбор.УплачиваетсяТорговыйСбор(Организация, ПериодНачисления) Тогда
			
			ДанныеРасчета = ДанныеДляУплатыТорговогоСбора(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов <> Неопределено
		И ОтборПоТипамНалогов.Получить(Перечисления.ТипыНалогов.НДС_НалоговыйАгент) <> Неопределено Тогда
		
		ДополнитьТаблицуНалоговДаннымиНА(Организация, ДатаДокумента, ТаблицаНалогов);
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов <> Неопределено Тогда
		ДополнитьТаблицуНалоговПрочимиНалогами(Организация, ДатаДокумента, ОтборПоТипамНалогов, ТаблицаНалогов);
	КонецЕсли;
	
	Возврат ТаблицаНалогов;
	
КонецФункции

#КонецОбласти

// Срок уплаты по типу налога.
// 
// Параметры:
//  ТипНалога - ПеречислениеСсылка.ТипыНалогов - 
//  ОтчетныйПериод - Дата - 
// 
// Возвращаемое значение:
//  Дата - срок уплаты по типу налога
Функция СрокУплатыПоТипуНалога(ТипНалога, ОтчетныйПериод) Экспорт
	
	// 28 день месяца - единый срок уплаты.
	Возврат НачалоМесяца(ОтчетныйПериод) + 27*24*3600;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                    КАК Период,
	|	ДанныеДокумента.Номер                   КАК Номер,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.СуммаДокумента          КАК СуммаДокумента,
	|	ДанныеДокумента.Ответственный           КАК Ответственный,
	|	ДанныеДокумента.Комментарий             КАК Комментарий,
	|	ДанныеДокумента.ПометкаУдаления         КАК ПометкаУдаления,
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	ДанныеДокумента.Проведен                КАК Проведен
	|
	|ИЗ
	|	Документ.НачислениеЕНП КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Реквизиты.Организация, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("КодПоОКТМО", РегистрацияВНалоговомОргане.КодПоОКТМО);

	Запрос.УстановитьПараметр("ИспользуетсяРаспределениеОплатИНачислений", Реквизиты.Период >= РеглУчетСервер.ДатаНачалаОбязательногоПримененияЕНП());
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	Значения.Вставить("ИдентификаторМетаданных",                         ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.НачислениеЕНП"));
	Значения.Вставить("ИспользоватьНачислениеЗарплаты",                  Константы.ИспользоватьНачислениеЗарплаты.Получить());
	Значения.Вставить("ИспользоватьУчетПрочихАктивовПассивов",           ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов"));
	Значения.Вставить("ВалютаУправленческогоУчета",                      Константы.ВалютаУправленческогоУчета.Получить());
	
	Если Реквизиты <> Неопределено Тогда
		
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация);
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			ВалютаРегламентированногоУчета,
			ВалютаРегламентированногоУчета,
			Реквизиты.Период,
			Реквизиты.Организация);
			
		Значения.Вставить("КоэффициентПересчетаВВалютуУпр",              Коэффициенты.КоэффициентПересчетаВВалютуУпр);
		Значения.Вставить("ВалютаРегламентированногоУчета",              ВалютаРегламентированногоУчета);
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	Налоги.ТипНалога КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))) КАК Сумма
	|ИЗ
	|	Документ.НачислениеЕНП.РасшифровкаНалогов КАК Налоги
	|
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|	
	|СГРУППИРОВАТЬ ПО
	|	Налоги.ТипНалога
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ЕдиныйНалоговыйПлатеж) КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))) КАК Сумма
	|ИЗ
	|	Документ.НачислениеЕНП КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияПоПрочимАктивамПассивам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	Налоги.ТипНалога КАК Аналитика,
	|	Налоги.Сумма КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	Налоги.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ДвижениеАктивовПассивовЗаСчетАктивовПассивов) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.НачислениеЕНП.РасшифровкаНалогов КАК Налоги
	|
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ЕдиныйНалоговыйПлатеж) КАК Аналитика,
	|	Налоги.Сумма КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	Налоги.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ДвижениеАктивовПассивовЗаСчетАктивовПассивов) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.НачислениеЕНП.РасшифровкаНалогов КАК Налоги
	|
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяТаблицы = "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяТаблицы, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	Расшифровка.Сумма КАК Сумма,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
	|	&Организация КАК Организация,
	|	"""" КАК ПлатежноеПоручениеНомер,
	|	Расшифровка.СрокУплаты КАК ПлатежноеПоручениеДата,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Расшифровка.Субконто1) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА Расшифровка.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(Расшифровка.Субконто2) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА Расшифровка.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(Расшифровка.Субконто3) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА Расшифровка.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	Расшифровка.ТипНалога КАК ТипНалога,
	|	""0"" КАК ПоказательОснования,
	|	""0"" КАК ПоказательПериода
	|ИЗ
	|	Документ.НачислениеЕНП КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЕНП.РасшифровкаНалогов КАК Расшифровка
	|		ПО ДанныеДокумента.Ссылка = Расшифровка.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьНачислениеЗарплаты
	|	И Расшифровка.ТипНалога В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛ),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛСПревышения),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛДоходыКонтрагентов),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом))
	|	И НЕ &ИспользуетсяРаспределениеОплатИНачислений
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСФондамиПоСтраховымВзносам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяТаблицы = "РасчетыСФондамиПоСтраховымВзносам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяТаблицы, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТипыНалоговВФонды", ТекстыЗапроса) Тогда
		ЕдиныйНалоговыйСчет.ТекстЗапросаВтТипыНалоговВФонды(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТипыНалоговВзносов.ВидСтрахования КАК ВидОбязательногоСтрахованияСотрудников,
	|	Расшифровка.СрокУплаты КАК ПлатежноеПоручениеДата,
	|	"""" КАК ПлатежноеПоручениеНомер,
	|	ИСТИНА КАК ЭтоСтраховыеВзносы,
	|	0 КАК ГодЗадолженностиПоЕСН,
	|	Расшифровка.Сумма КАК Сумма
	|ИЗ
	|	Документ.НачислениеЕНП КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЕНП.РасшифровкаНалогов КАК Расшифровка
	|		ПО ДанныеДокумента.Ссылка = Расшифровка.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТипыНалоговВФонды КАК ТипыНалоговВзносов
	|		ПО Расшифровка.ТипНалога = ТипыНалоговВзносов.ТипНалога
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьНачислениеЗарплаты
	|	И НЕ &ИспользуетсяРаспределениеОплатИНачислений
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТКА
Функция ТекстЗапросаТаблицаОтражениеДокументовВМеждународномУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВМеждународномУчете";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                         КАК Период,
	|	&Организация                    КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)    КАК ДатаОтражения";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТКА

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                        КАК Период,
	|	&Организация                   КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)   КАК ДатаОтражения";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоНалогамНаЕдиномНалоговомСчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыПоНалогамНаЕдиномНалоговомСчете";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.СчетУчета КАК СчетУчета,
	|	ДанныеДокумента.ТипНалога КАК Налог,
	|	ДанныеДокумента.КодБК КАК КодБК,
	|	ЕСТЬNULL(Регистрации.Ссылка, &РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(Регистрации.КодПоОКТМО, &КодПоОКТМО) КАК КодПоОКТМО,
	|	ДанныеДокумента.СрокУплаты КАК СрокУплаты,
	|	НЕОПРЕДЕЛЕНО КАК ПлатежныйДокумент,
	|	ДанныеДокумента.Сумма КАК Сумма
	|ИЗ
	|	Документ.НачислениеЕНП.РасшифровкаНалогов КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК Регистрации
	|	ПО Регистрации.Ссылка = (ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Субконто1) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА ДанныеДокумента.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Субконто2) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА ДанныеДокумента.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Субконто3) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА ДанныеДокумента.Субконто3
	|		ИНАЧЕ &РегистрацияВНалоговомОргане
	|	КОНЕЦ)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Заполнение

// Функция возвращает свойства периода для получения информации об удержанном НДФЛ
// 
// Параметры:
//  Период - Дата - дата заполняемого документа
//  ПредварительныеДанные - Булево - признак расчета периода для получения предварительных сведений
// 
// Возвращаемое значение:
//  Структура - структура периода заполнения:
//    * НачалоПериода - Дата - начало отчетного периода
//    * КонецПериода - Дата - конец отчетного периода
//    * ДатаНачала - Дата - начало периода отбора
//    * ДатаОкончания - Дата - конец периода отбора
//
Функция ПериодЗаполненияНДФЛ(Знач Период, Знач ПерваяПоловинаПериода = Ложь)
	
	СвойстваПериода = Новый Структура("НачалоПериода, КонецПериода, ДатаНачала, ДатаОкончания");
	
	// Отчетный период
	СвойстваПериода.НачалоПериода = НачалоМесяца(Период);
	СвойстваПериода.КонецПериода  = КонецМесяца(Период);
	
	// Период отбора сведений
	СвойстваПериода.ДатаНачала    = СвойстваПериода.НачалоПериода;
	СвойстваПериода.ДатаОкончания = СвойстваПериода.КонецПериода;
	
	ДатаПереходаНаЕдиныйНалоговыйПлатеж = РеглУчетСервер.ДатаНачалаОбязательногоПримененияЕНП();
	ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ = ДобавитьМесяц(ДатаПереходаНаЕдиныйНалоговыйПлатеж, 12);
	
	Если Период < ДатаПереходаНаЕдиныйНалоговыйПлатеж Тогда
		Возврат СвойстваПериода;
	КонецЕсли;
	
	ГраницаПериода = КонецДня(Дата(Год(Период), Месяц(Период), 22)); // 22-е число, конец дня
	
	Если КонецДня(Период) > ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ Тогда
		Если ПерваяПоловинаПериода Тогда
			СвойстваПериода.КонецПериода  = ГраницаПериода;
		Иначе
			СвойстваПериода.НачалоПериода = ГраницаПериода + 1;
		КонецЕсли;
		СвойстваПериода.ДатаНачала    = СвойстваПериода.НачалоПериода;
		СвойстваПериода.ДатаОкончания = СвойстваПериода.КонецПериода;
	ИначеЕсли КонецДня(Период) < КонецГода(Период) Тогда
		ГраницаПериодаПредварительныхДанных = КонецДня(Дата(Год(Период), Месяц(Период), 9)); // 9-е число, конец дня
		СвойстваПериода.ДатаНачала    = Макс(ДобавитьМесяц(ГраницаПериода, -1) + 1, НачалоГода(Период));
		СвойстваПериода.ДатаОкончания = ?(ПерваяПоловинаПериода, ГраницаПериодаПредварительныхДанных, ГраницаПериода);
	Иначе
		// 13-й период, конец декабря
		СвойстваПериода.НачалоПериода = ГраницаПериода + 1;
		СвойстваПериода.ДатаНачала    = ГраницаПериода + 1;
		СвойстваПериода.ДатаОкончания = КонецГода(Период);
	КонецЕсли;
	
	Возврат СвойстваПериода;
	
КонецФункции

Процедура ВычестьУжеЗарегистрированныеДанныеПоНДФЛ(ТаблицаНалогов, ПараметрыЗаполнения)
	
	Организация         = ПараметрыЗаполнения.Организация;
	ДатаДокумента       = ПараметрыЗаполнения.ДатаДокумента;
	ИсключаемыйДокумент = ПараметрыЗаполнения.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("ИсключаемыйДокумент", ИсключаемыйДокумент);
	Запрос.УстановитьПараметр("ТаблицаНДФЛ", ТаблицаНалогов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛ.КодБК КАК КодБК,
	|	НДФЛ.ТипНалога КАК ТипНалога,
	|	НДФЛ.НачалоПериода КАК НачалоПериода,
	|	НДФЛ.КонецПериода КАК КонецПериода,
	|	НДФЛ.СрокУплаты КАК СрокУплаты,
	|	НДФЛ.СчетУчета КАК СчетУчета,
	|	НДФЛ.Субконто1 КАК Субконто1,
	|	НДФЛ.Субконто2 КАК Субконто2
	|ПОМЕСТИТЬ ТаблицаНДФЛ
	|ИЗ
	|	&ТаблицаНДФЛ КАК НДФЛ
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Налоги.КодБК КАК КодБК,
	|	Налоги.ТипНалога КАК ТипНалога,
	|	Налоги.НачалоПериода КАК НачалоПериода,
	|	Налоги.КонецПериода КАК КонецПериода,
	|	Налоги.СрокУплаты КАК СрокУплаты,
	|	Налоги.СчетУчета КАК СчетУчета,
	|	Налоги.Субконто1 КАК Субконто1,
	|	Налоги.Субконто2 КАК Субконто2,
	|	-Налоги.Сумма КАК Сумма
	|ИЗ
	|	Документ.НачислениеЕНП.РасшифровкаНалогов КАК Налоги
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНДФЛ КАК НДФЛ
	|		ПО Налоги.ТипНалога = НДФЛ.ТипНалога
	|			И Налоги.НачалоПериода = НДФЛ.НачалоПериода
	|			И Налоги.КонецПериода = НДФЛ.КонецПериода
	|			И Налоги.СрокУплаты = НДФЛ.СрокУплаты
	|			И Налоги.Субконто1 = НДФЛ.Субконто1
	|			И Налоги.Субконто2 = НДФЛ.Субконто2
	|
	|ГДЕ
	|	Налоги.Ссылка.Проведен
	|	И Налоги.Ссылка <> &ИсключаемыйДокумент
	|	И Налоги.Ссылка.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(Налоги.Ссылка.Дата, МЕСЯЦ) = &ПериодРегистрации
	|	И Налоги.ТипНалога В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛ),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛСПревышения),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛДивиденды),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛДивидендыСПревышения))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНалогов.Добавить(), Выборка);
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаНалогов);
	
КонецПроцедуры

// Возвращает данные для платежа по декларации
//
// Параметры:
//  ТипНалогаСтрока - Строка - см. КомандыЗаполненияПоДекларации()
//  Организация - СправочникСсылка.Организации
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//  ОкончаниеОтчетногоПериода - Дата
//  ОкончаниеОтчетногоПериодаДляРасчета - Дата
//  ДанныеЗаТекущийМесяц - Булево
//  УчитыватьОтчетныйПериодДляРасчета - Булево
//
// Возвращаемое значение:
//  Структура - ключи,  см. ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога().
//    Для задач "НДС" дополняется ключами:
//       * СуммаНДСПоДекларации - Число - сумма НДС по декларации
//    Таблица в ключе "Платежи" дополнена колонкой:
//       * КодНалоговогоОргана - Строка - код налогового органа 
//       * ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип налога по КБК
//       * СчетУчета - ПланСчетовСсылка.Хозрасчетный - счет учета по типу налога
//       * НачалоПериода - Дата - дата начала периода декларации
//       * КонецПериода - Дата - дата окончания периода декларации
//
Функция ДанныеДляУплатыНалогаПоДекларации(ТипНалогаСтрока, Организация, РегистрацияВНалоговомОргане, ОкончаниеОтчетногоПериода, ОкончаниеОтчетногоПериодаДляРасчета, ДанныеЗаТекущийМесяц = Ложь,
	УчитыватьОтчетныйПериодДляРасчета = Ложь) Экспорт
	
	ЭтоНДС = (ТипНалогаСтрока = "НДС");
	
	ДанныеДекларации = ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога(
		ТипНалогаСтрока,
		Организация,
		РегистрацияВНалоговомОргане,
		ОкончаниеОтчетногоПериодаДляРасчета);
		
	Если ДанныеДекларации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДекларации.Ссылка, "ДатаНачала, ДатаОкончания");
	
	КоличествоСтрок = ДанныеДекларации.Платежи.Количество();
	
	ДанныеДекларации.Платежи.Колонки.Добавить("КодНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеДекларации.Платежи.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ДанныеДекларации.Платежи.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогов"));
	ДанныеДекларации.Платежи.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ДанныеДекларации.Платежи.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеДекларации.Платежи.Колонки.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	// Для НДС отдельно добавим итог по декларации
	Если ЭтоНДС Тогда
		ДанныеДекларации.Вставить("СуммаНДСПоДекларации", ДанныеДекларации.Платежи.Итог("Сумма"));
	КонецЕсли;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Платеж = ДанныеДекларации.Платежи[КоличествоСтрок - НомерСтроки]; 
		Если Платеж.Сумма = 0 Тогда 
			ДанныеДекларации.Платежи.Удалить(Платеж);
			Продолжить;
		КонецЕсли;
		
		Если ДанныеЗаТекущийМесяц Тогда
			
			ЭтоОтчетныйПериодДляРасчета = Ложь;
			
			Если УчитыватьОтчетныйПериодДляРасчета Тогда
				ЭтоОтчетныйПериодДляРасчета = КонецМесяца(Платеж.Период) = КонецМесяца(ОкончаниеОтчетногоПериодаДляРасчета); 
			КонецЕсли;
			
			Если КонецМесяца(Платеж.Период) <> КонецМесяца(ОкончаниеОтчетногоПериода) 
				И НЕ ЭтоОтчетныйПериодДляРасчета Тогда
				ДанныеДекларации.Платежи.Удалить(Платеж);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Платеж.КодНалоговогоОргана = ?(ДанныеДекларации.Свойство("КодНалоговогоОргана"), ДанныеДекларации.КодНалоговогоОргана, "");
		Платеж.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		Платеж.ТипНалога = ТипНалогаПоКБК(Платеж.КБК, Платеж.Агент);
		Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога);
		Платеж.НачалоПериода = РеквизитыДекларации.ДатаНачала;
		Платеж.КонецПериода = РеквизитыДекларации.ДатаОкончания;
		
	КонецЦикла;
		
	ДанныеДекларации.Платежи.Сортировать("ТипНалога Возр, Период Возр");
	Возврат ДанныеДекларации;
	
КонецФункции

// Возвращает данные для платежа по регистру расчета земельного налога
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ОкончаниеОтчетногоПериодаДляРасчета - Дата
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//     * ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип налога по КБК
//     * КБК - Строка - КБК
//     * Сумма - Число - сумма налога к уплате
//     * НачалоПериода - Дата - дата начала периода расчета
//     * КонецПериода - Дата - дата окончания периода расчета
//     * СчетУчета - ПланСчетовСсылка.Хозрасчетный - счет учета по типу налога
//     * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
Функция ДанныеДляУплатыЗемельногоНалога(Организация, ОкончаниеОтчетногоПериодаДляРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(ОкончаниеОтчетногоПериодаДляРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета));
	
	Запрос.УстановитьПараметр("НачалоПримененияНовогоРасчета", 
								РасчетИмущественныхНалоговКлиентСервер.НачалоПримененияНовогоРасчетаЗемельногоНалога());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Расчет.НачалоПериода КАК НачалоПериода,
	|	Расчет.КонецПериода КАК КонецПериода,
	|	Расчет.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(Расчет.Сумма) КАК Сумма,
	|	Расчет.КБК КАК КБК
	|	
	|ИЗ (
	|	ВЫБРАТЬ
	|		&НачалоПериода КАК НачалоПериода,
	|		&ПериодРасчета КАК КонецПериода,
	|		РасчетЗемельногоНалога.ИФНС КАК РегистрацияВНалоговомОргане,
	|		СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) КАК Сумма,
	|		РасчетЗемельногоНалога.КБК КАК КБК
	|	ИЗ
	|		РегистрСведений.РасчетЗемельногоНалога КАК РасчетЗемельногоНалога
	|	ГДЕ
	|		РасчетЗемельногоНалога.ПериодРасчета = &ПериодРасчета
	|		И РасчетЗемельногоНалога.Организация = &Организация
	|		И РасчетЗемельногоНалога.ПериодРасчета >= &НачалоПримененияНовогоРасчета
	|		И РасчетЗемельногоНалога.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетЗемельногоНалога.КБК,
	|		РасчетЗемельногоНалога.ИФНС
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&НачалоПериода КАК НачалоПериода,
	|		&ПериодРасчета КАК КонецПериода,
	|		РасчетЗемельногоНалогаДо2020.ИФНС КАК РегистрацияВНалоговомОргане,
	|		СУММА(РасчетЗемельногоНалогаДо2020.СуммаНалогаКУплате) КАК Сумма,
	|		РасчетЗемельногоНалогаДо2020.КБК КАК КБК
	|	ИЗ
	|		РегистрСведений.РасчетЗемельногоНалогаДо2020 КАК РасчетЗемельногоНалогаДо2020
	|	ГДЕ
	|		РасчетЗемельногоНалогаДо2020.ПериодРасчета = &ПериодРасчета
	|		И РасчетЗемельногоНалогаДо2020.Организация = &Организация
	|		И РасчетЗемельногоНалогаДо2020.ПериодРасчета < &НачалоПримененияНовогоРасчета
	|		И РасчетЗемельногоНалогаДо2020.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетЗемельногоНалогаДо2020.КБК,
	|		РасчетЗемельногоНалогаДо2020.ИФНС
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетЗемельногоНалогаДо2020.СуммаНалогаКУплате) > 0
	|	) КАК Расчет
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчет.КБК,
	|	Расчет.РегистрацияВНалоговомОргане,
	|	Расчет.НачалоПериода,
	|	Расчет.КонецПериода"; 
	
	ДанныеРасчета = Запрос.Выполнить().Выгрузить(); 
	ДанныеРасчета.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогов"));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого Платеж Из ДанныеРасчета Цикл 
		
		Платеж.ТипНалога = Перечисления.ТипыНалогов.ЗемельныйНалог;
		Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога);
		
	КонецЦикла; 
	
	Возврат ДанныеРасчета;
	
КонецФункции

// Возвращает данные для платежа по регистру расчета транспортного налога
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ОкончаниеОтчетногоПериодаДляРасчета - Дата
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//     * ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип налога по КБК
//     * КБК - Строка - КБК
//     * Сумма - Число - сумма налога к уплате
//     * НачалоПериода - Дата - дата начала периода расчета
//     * КонецПериода - Дата - дата окончания периода расчета
//     * СчетУчета - ПланСчетовСсылка.Хозрасчетный - счет учета по типу налога
//     * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
Функция ДанныеДляУплатыТранспортногоНалога(Организация, ОкончаниеОтчетногоПериодаДляРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(ОкончаниеОтчетногоПериодаДляРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&НачалоПериода КАК НачалоПериода,
	               |	&ПериодРасчета КАК КонецПериода,
	               |	РасчетТранспортногоНалога.ИФНС КАК РегистрацияВНалоговомОргане,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ТранспортныйНалог) КАК ТипНалога,
	               |	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате) КАК Сумма
	               |ИЗ
	               |	РегистрСведений.РасчетТранспортногоНалога КАК РасчетТранспортногоНалога
	               |ГДЕ
	               |	РасчетТранспортногоНалога.ПериодРасчета = &ПериодРасчета
	               |	И РасчетТранспортногоНалога.Организация = &Организация
	               |	И РасчетТранспортногоНалога.Активность
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетТранспортногоНалога.ИФНС
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате) > 0"; 
	
	ДанныеРасчета = Запрос.Выполнить().Выгрузить(); 
	ДанныеРасчета.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого Платеж Из ДанныеРасчета Цикл 
		
		Платеж.КБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(Платеж.ТипНалога);
		Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога);
		
	КонецЦикла; 
	
	Возврат ДанныеРасчета;
	
КонецФункции

// Возвращает данные для платежа по регистру расчета налога на имущество
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ОкончаниеОтчетногоПериодаДляРасчета - Дата
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//     * ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип налога по КБК
//     * КБК - Строка - КБК
//     * Сумма - Число - сумма налога к уплате
//     * НачалоПериода - Дата - дата начала периода расчета
//     * КонецПериода - Дата - дата окончания периода расчета
//     * СчетУчета - ПланСчетовСсылка.Хозрасчетный - счет учета по типу налога
//     * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
Функция ДанныеДляУплатыНалогаНаИмущество(Организация, ОкончаниеОтчетногоПериодаДляРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(ОкончаниеОтчетногоПериодаДляРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогНаИмущество.НачалоПериода                 КАК НачалоПериода,
	|	НалогНаИмущество.КонецПериода                  КАК КонецПериода,
	|	НалогНаИмущество.РегистрацияВНалоговомОргане   КАК РегистрацияВНалоговомОргане,
	|	НалогНаИмущество.КБК                           КАК КБК,
	|	СУММА(НалогНаИмущество.Сумма)                  КАК Сумма
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		&НачалоПериода                                    КАК НачалоПериода,
	|		&ПериодРасчета                                    КАК КонецПериода,
	|		РасчетНалогаНаИмущество.ИФНС                      КАК РегистрацияВНалоговомОргане,
	|		РасчетНалогаНаИмущество.КБК                       КАК КБК,
	|		СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате) КАК Сумма
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|	ГДЕ
	|		РасчетНалогаНаИмущество.ПериодРасчета = &ПериодРасчета
	|		И РасчетНалогаНаИмущество.Организация = &Организация
	|		И РасчетНалогаНаИмущество.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетНалогаНаИмущество.КБК,
	|		РасчетНалогаНаИмущество.ИФНС
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате) > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&НачалоПериода                                        КАК НачалоПериода,
	|		&ПериодРасчета                                        КАК КонецПериода,
	|		РасчетНалогаНаИмуществоПоКС.ИФНС                      КАК РегистрацияВНалоговомОргане,
	|		ЕСТЬNULL(ПараметрыНачисленияННИ.КБК, """")            КАК КБК,
	|		СУММА(РасчетНалогаНаИмуществоПоКС.СуммаНалогаКУплате) КАК Сумма
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости КАК РасчетНалогаНаИмуществоПоКС
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(&ПериодРасчета,
	|				Организация = &Организация) КАК ПараметрыНачисленияННИ
	|			ПО РасчетНалогаНаИмуществоПоКС.Организация = ПараметрыНачисленияННИ.Организация
	|				И РасчетНалогаНаИмуществоПоКС.ОсновноеСредство = ПараметрыНачисленияННИ.ОсновноеСредство
	|				И РасчетНалогаНаИмуществоПоКС.КодПоОКТМО = ПараметрыНачисленияННИ.КодПоОКТМО
	|	ГДЕ
	|		РасчетНалогаНаИмуществоПоКС.ПериодРасчета = &ПериодРасчета
	|		И РасчетНалогаНаИмуществоПоКС.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоКС.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетНалогаНаИмуществоПоКС.ИФНС,
	|		ЕСТЬNULL(ПараметрыНачисленияННИ.КБК, """")
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетНалогаНаИмуществоПоКС.СуммаНалогаКУплате) > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&НачалоПериода                                         КАК НачалоПериода,
	|		&ПериодРасчета                                         КАК КонецПериода,
	|		РасчетНалогаНаИмуществоПоСГС.ИФНС                      КАК РегистрацияВНалоговомОргане,
	|		РасчетНалогаНаИмуществоПоСГС.КБК                       КАК КБК,
	|		СУММА(РасчетНалогаНаИмуществоПоСГС.СуммаНалогаКУплате) КАК Сумма
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости КАК РасчетНалогаНаИмуществоПоСГС
	|	ГДЕ
	|		РасчетНалогаНаИмуществоПоСГС.ПериодРасчета = &ПериодРасчета
	|		И РасчетНалогаНаИмуществоПоСГС.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоСГС.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетНалогаНаИмуществоПоСГС.КБК,
	|		РасчетНалогаНаИмуществоПоСГС.ИФНС
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетНалогаНаИмуществоПоСГС.СуммаНалогаКУплате) > 0
	|) КАК НалогНаИмущество
	|
	|СГРУППИРОВАТЬ ПО
	|	НалогНаИмущество.НачалоПериода,
	|	НалогНаИмущество.КонецПериода,
	|	НалогНаИмущество.РегистрацияВНалоговомОргане,
	|	НалогНаИмущество.КБК
	|	";
	
	ДанныеРасчета = Запрос.Выполнить().Выгрузить();
	ДанныеРасчета.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогов"));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого Платеж Из ДанныеРасчета Цикл 
		
		Платеж.ТипНалога = Перечисления.ТипыНалогов.НалогНаИмущество;
		Если Не ЗначениеЗаполнено(Платеж.КБК) Тогда
			Платеж.КБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(Платеж.ТипНалога);
		КонецЕсли;
		Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога);
		
	КонецЦикла; 
	
	Возврат ДанныеРасчета;
	
КонецФункции

// Возвращает данные для платежа по регистру расчета налога УСН
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ОкончаниеОтчетногоПериодаДляРасчета - Дата
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//     * ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип налога по КБК
//     * КБК - Строка - КБК
//     * Сумма - Число - сумма налога к уплате
//     * НачалоПериода - Дата - дата начала периода расчета
//     * КонецПериода - Дата - дата окончания периода расчета
//     * СчетУчета - ПланСчетовСсылка.Хозрасчетный - счет учета по типу налога         
//     * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
Функция ДанныеДляУплатыНалогаУСН(Организация, ОкончаниеОтчетногоПериодаДляРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(ОкончаниеОтчетногоПериодаДляРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ОкончаниеОтчетногоПериодаДляРасчета));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&НачалоПериода КАК НачалоПериода,
	               |	&ПериодРасчета КАК КонецПериода,
				   |	РасчетНалогаУСН.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |	СУММА(РасчетНалогаУСН.НалогКУплате) КАК Сумма,
	               |	СУММА(РасчетНалогаУСН.МинимальныйНалог) КАК МинимальныйНалог,
	               |	СУММА(РасчетНалогаУСН.НалогИсчисленныйВсего) КАК НалогИсчисленныйВсего,
	               |	СУММА(РасчетНалогаУСН.АвансовыеПлатежи) КАК АвансовыеПлатежи
	               |ИЗ
	               |	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
	               |ГДЕ
	               |	РасчетНалогаУСН.Организация = &Организация
	               |	И РасчетНалогаУСН.ПериодРасчета = &ПериодРасчета
	               |	И РасчетНалогаУСН.Активность
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетНалогаУСН.ОбъектНалогообложения
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(РасчетНалогаУСН.НалогКУплате) > 0";
	
	ДанныеРасчета = Запрос.Выполнить().Выгрузить();
	ДанныеРасчета.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогов"));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ДанныеРасчета.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеРасчета.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	ЭтоНалогЗаГод = (КонецГода(ОкончаниеОтчетногоПериодаДляРасчета) = ОкончаниеОтчетногоПериодаДляРасчета);
	
	Для Каждого Платеж Из ДанныеРасчета Цикл 
		
		Если Платеж.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда 
			Платеж.ТипНалога = Перечисления.ТипыНалогов.УСН_Доходы;
		ИначеЕсли Платеж.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда 
			Если КонецГода(ОкончаниеОтчетногоПериодаДляРасчета) = ОкончаниеОтчетногоПериодаДляРасчета
				И Платеж.НалогИсчисленныйВсего < Платеж.МинимальныйНалог Тогда  
				Платеж.ТипНалога = Перечисления.ТипыНалогов.УСН_МинимальныйНалог;
			Иначе
				Платеж.ТипНалога = Перечисления.ТипыНалогов.УСН_ДоходыМинусРасходы;
			КонецЕсли;
		КонецЕсли;  
		Платеж.КБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(Платеж.ТипНалога);
		Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога);
		Платеж.РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
		
	КонецЦикла; 
	
	Возврат ДанныеРасчета;
	
КонецФункции

// Возвращает данные для уплаты торгового сбора
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ОкончаниеОтчетногоПериодаДляРасчета - Дата
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//     * ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип налога по КБК
//     * КБК - Строка - КБК
//     * Сумма - Число - сумма налога к уплате
//     * НачалоПериода - Дата - дата начала периода расчета
//     * КонецПериода - Дата - дата окончания периода расчета
//     * СчетУчета - ПланСчетовСсылка.Хозрасчетный - счет учета по типу налога    
//     * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
Функция ДанныеДляУплатыТорговогоСбора(Организация, ОкончаниеОтчетногоПериодаДляРасчета) Экспорт
	
	РасчетПоСбору = ТорговыйСбор.СуммаТорговогоСбора(Организация, НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета), ОкончаниеОтчетногоПериодаДляРасчета);
	
	ДанныеРасчета = Новый ТаблицаЗначений;
	ДанныеРасчета.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогов"));
	ДанныеРасчета.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеРасчета.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2)); 
	ДанныеРасчета.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеРасчета.Колонки.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ДанныеРасчета.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	Если РасчетПоСбору.Количество() = 0 Тогда
		Возврат ДанныеРасчета;
	КонецЕсли;
	
	Платеж = ДанныеРасчета.Добавить();
	Платеж.ТипНалога = Перечисления.ТипыНалогов.ТорговыйСбор;
	Платеж.КБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(Платеж.ТипНалога);
	Платеж.Сумма = РасчетПоСбору.ВыгрузитьКолонку("Сумма");
	Платеж.НачалоПериода = НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета);
	Платеж.КонецПериода = ОкончаниеОтчетногоПериодаДляРасчета;
	Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога); 
	Платеж.РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	
	Возврат ДанныеРасчета;
	
КонецФункции

// Возвращает данные для платежа по декларации
//
// Параметры:
//  КБК - Строка 
//  Агент - Булево
//
// Возвращаемое значение:  
// 	ПеречислениеСсылка.ТипыНалогов
//
Функция ТипНалогаПоКБК(КБК, Агент)
	
	Если КБК = "18210602010021000110" Тогда 
		ТипНалога = Перечисления.ТипыНалогов.НалогНаИмущество; 
	ИначеЕсли КБК = "18210101012021000110" Тогда 
		ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_РегиональныйБюджет;
	ИначеЕсли КБК = "18210101011011000110" Тогда 
		ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_ФедеральныйБюджет;
	ИначеЕсли КБК = "18210301000011000110" 
		И Агент = Ложь Тогда 
		ТипНалога = Перечисления.ТипыНалогов.НДС;
	ИначеЕсли КБК = "18210301000011000110" 
		И Агент = Истина Тогда 
		ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент; 
	ИначеЕсли КБК = "18210606031031000110" Тогда 
		ТипНалога = Перечисления.ТипыНалогов.ЗемельныйНалог;
	ИначеЕсли КБК = "18210604011021000110" Тогда 
		ТипНалога = Перечисления.ТипыНалогов.ТранспортныйНалог;
	Иначе
		ТипНалога = Перечисления.ТипыНалогов.ПрочиеНалогиИСборы;
	КонецЕсли;
	
	Возврат ТипНалога;
	
КонецФункции

Функция УчитыватьОтчетныйПериодДляРасчета(Знач МесяцНачисления)

	УчитыватьОтчетныйПериодДляРасчета = Ложь;
	
	НомерМесяцаАпрель = 4;
	НомерМесяцаИюль = 7;
	НомерМесяцаОктябрь = 10;
	
	Если МесяцНачисления = НомерМесяцаАпрель
		ИЛИ МесяцНачисления = НомерМесяцаИюль
		ИЛИ МесяцНачисления = НомерМесяцаОктябрь Тогда
	
		УчитыватьОтчетныйПериодДляРасчета = Истина;
	КонецЕсли;                               
	
	Возврат УчитыватьОтчетныйПериодДляРасчета; 
	
КонецФункции

Процедура ДополнитьТаблицуНалоговДаннымиНА(Организация, ДатаОстатков, ТаблицаНалогов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("СчетНалогов", РеглУчетСервер.СчетУчетаПоТипуНалога(Перечисления.ТипыНалогов.НДС_НалоговыйАгент));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	СУММА(-ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В ИЕРАРХИИ (&СчетНалогов),,
	|			Организация = &Организация
	|		) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3";
	
	ТаблицаНалоговНА = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНалога Из ТаблицаНалоговНА Цикл 
			
		СуммаНалогаКУплате = СтрокаНалога.Сумма;
			
		НоваяСтрока = ТаблицаНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалога);
		НоваяСтрока.ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент;
		НоваяСтрока.КодБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(Перечисления.ТипыНалогов.НДС_НалоговыйАгент); 
		НоваяСтрока.Сумма  = СуммаНалогаКУплате;
		НоваяСтрока.НачалоПериода = НачалоКвартала(ДобавитьМесяц(ДатаОстатков,-3));
		НоваяСтрока.КонецПериода = КонецКвартала(ДобавитьМесяц(ДатаОстатков,-3));
		НоваяСтрока.СрокУплаты = СрокУплатыПоТипуНалога(НоваяСтрока.ТипНалога, ДатаОстатков);
		НоваяСтрока.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(НоваяСтрока.ТипНалога);
		
	КонецЦикла;
	
	ТаблицаНалогов.Сортировать("ТипНалога Возр, СрокУплаты Возр");
	
КонецПроцедуры

Процедура ДополнитьТаблицуНалоговПрочимиНалогами(Организация, ДатаДокумента, ОтборПоТипамНалогов, ТаблицаНалогов)
	
	ДатаОстатков = ДатаДокумента;
	
	ПрочиеНалоги = Новый Массив;
	СчетаПрочихНалогов = Новый Массив;
	ТипыНалоговСОсобымЗаполнением = ТипыНалоговСОсобымЗаполнением();
	Для Каждого ЭлементСписка Из ОтборПоТипамНалогов Цикл
		Если ТипыНалоговСОсобымЗаполнением.Найти(ЭлементСписка.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПрочиеНалоги.Добавить(ЭлементСписка.Ключ);
		Если ЭлементСписка.Ключ = Перечисления.ТипыНалогов.ПрочиеНалогиИСборы Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаПрочихНалогов, ЭлементСписка.Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ПрочиеНалоги) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрочиеНалоги", ПрочиеНалоги);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыНалогов.Ссылка КАК ТипНалога,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетУчета
	|ИЗ
	|	Перечисление.ТипыНалогов КАК ТипыНалогов
	|ГДЕ
	|	ТипыНалогов.Ссылка В (&ПрочиеНалоги)
	|	И ТипыНалогов.Ссылка <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПрочиеНалогиИСборы)";
	
	ТипыНалогов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТипыНалогов Цикл
		СтрокаТаблицы.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(СтрокаТаблицы.ТипНалога);
	КонецЦикла;
	
	Если СчетаПрочихНалогов <> Неопределено Тогда
		
		Для Каждого СчетПрочихНалогов Из СчетаПрочихНалогов Цикл 
			НоваяСтрока = ТипыНалогов.Добавить();
			НоваяСтрока.ТипНалога = Перечисления.ТипыНалогов.ПрочиеНалогиИСборы;
			НоваяСтрока.СчетУчета = СчетПрочихНалогов;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыНалогов", ТипыНалогов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаНалогов", ТипыНалогов.ВыгрузитьКолонку("СчетУчета"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ТипНалога,
	|	Таблица.СчетУчета
	|ПОМЕСТИТЬ ТипыНалогов
	|ИЗ &ТипыНалогов КАК Таблица
	|;
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	СУММА(-ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма
	|ПОМЕСТИТЬ НалогиКУплате
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В ИЕРАРХИИ (&СчетаНалогов),,
	|			Организация = &Организация
	|		) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|;
	|
	|ВЫБРАТЬ
	|	ТипыНалогов.ТипНалога КАК ТипНалога,
	|	НалогиКУплате.Счет КАК СчетУчета,
	|	НалогиКУплате.Субконто1 КАК Субконто1,
	|	НалогиКУплате.Субконто2 КАК Субконто2,
	|	НалогиКУплате.Субконто3 КАК Субконто3,
	|	НалогиКУплате.Сумма
	|ИЗ
	|	НалогиКУплате КАК НалогиКУплате
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипыНалогов КАК ТипыНалогов
	|	ПО НалогиКУплате.Счет= ТипыНалогов.СчетУчета";
	
	ТаблицаПрочихНалогов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНалога Из ТаблицаПрочихНалогов Цикл
		
		НоваяСтрока = ТаблицаНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалога);
		НоваяСтрока.КодБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(СтрокаНалога.ТипНалога);
		НоваяСтрока.НачалоПериода = НачалоМесяца(ДатаОстатков);
		НоваяСтрока.КонецПериода = КонецМесяца(ДатаОстатков);
		НоваяСтрока.СрокУплаты = СрокУплатыПоТипуНалога(НоваяСтрока.ТипНалога, ДатаДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТипыНалоговСОсобымЗаполнением()
	
	ТипыНалогов = Новый Массив;
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.НДС);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.НДС_НалоговыйАгент);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.НалогНаПрибыль_РегиональныйБюджет);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.НалогНаПрибыль_ФедеральныйБюджет);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.ЗемельныйНалог);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.ТранспортныйНалог);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.НалогНаИмущество);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.ТорговыйСбор);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.УСН_Доходы);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.УСН_ДоходыМинусРасходы);
	ТипыНалогов.Добавить(Перечисления.ТипыНалогов.УСН_МинимальныйНалог);
	
	Возврат ТипыНалогов;
	
КонецФункции

Процедура ДобавитьВТаблицуНалогов(ТаблицаНалогов, Платежи, ПараметрыОтбора)
	
	Если ПараметрыОтбора.Свойство("ТипыНалогов") Тогда
		ОтборПоТипамНалогов = ПараметрыОтбора.ТипыНалогов;
	Иначе
		ОтборПоТипамНалогов = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаНалога Из Платежи Цикл
		Если ОтборПоТипамНалогов = Неопределено Или ОтборПоТипамНалогов.Получить(СтрокаНалога.ТипНалога) <> Неопределено Тогда
			
			НоваяСтрока = ТаблицаНалогов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалога);
			НоваяСтрока.КодБК = СтрокаНалога.КБК;
			НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			Если СтрокаНалога.ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_РегиональныйБюджет Тогда
				НоваяСтрока.Субконто2 = Перечисления.УровниБюджетов.РегиональныйБюджет;
				НоваяСтрока.Субконто3 = СтрокаНалога.РегистрацияВНалоговомОргане;
				НоваяСтрока.НачалоПериода = НачалоКвартала(НоваяСтрока.КонецПериода);
			ИначеЕсли СтрокаНалога.ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
				НоваяСтрока.Субконто2 = Перечисления.УровниБюджетов.ФедеральныйБюджет;
				НоваяСтрока.Субконто3 = СтрокаНалога.РегистрацияВНалоговомОргане;
				НоваяСтрока.НачалоПериода = НачалоКвартала(НоваяСтрока.КонецПериода);
			Иначе
				ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаНалога.СчетУчета);
				Если ДанныеСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане Тогда
					НоваяСтрока.Субконто2 = СтрокаНалога.РегистрацияВНалоговомОргане;
				ИначеЕсли ДанныеСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане Тогда
					НоваяСтрока.Субконто3 = СтрокаНалога.РегистрацияВНалоговомОргане;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаНалога.ТипНалога = Перечисления.ТипыНалогов.НДС
				Или СтрокаНалога.ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент Тогда
				НоваяСтрока.СрокУплаты = СрокУплатыПоТипуНалога(СтрокаНалога.ТипНалога, СтрокаНалога.Период);
			Иначе
				НоваяСтрока.СрокУплаты = СрокУплатыПоТипуНалога(СтрокаНалога.ТипНалога, ПараметрыОтбора.ДатаДокумента);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДействующиеРегистрацииВНалоговомОргане(Организация)
	
	МассивОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	Если ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) Тогда
		МассивОрганизаций.Добавить(Организация.ГоловнаяОрганизация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	
	Запрос.Текст = "ВЫБРАТЬ
					|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
					|ГДЕ
					|	РегистрацииВНалоговомОргане.Владелец В (&Организация)
					|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
