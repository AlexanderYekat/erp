#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ФормаОтчетаПроверкиКС Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Уведомление = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьСсылку(УникальныйИдентификатор);
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(
		ЭтотОбъект, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Уведомление);
	
	Если НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.ув.об исчис.сум.нал.") Тогда
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	КонецЕсли;
	
	#Область СтандартныеПодсистемы

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодменюПечать;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	#КонецОбласти
	
	УстановитьУсловноеОформление();
	
	ОбновитьИнформационнуюПанельБРО();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     ГоловнаяОрганизация);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПанельОтправкиВКонтролирующиеОрганы
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Уведомление);
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	ПараметрыОповещения.Вставить("Период",      Объект.Дата);
	
	Оповестить("Запись_УведомлениеОбИсчисленныхСуммахНалогов", ПараметрыОповещения, Объект.Уведомление);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма",          Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	СтруктураПараметров.Вставить("ЭтоОтчет",       Ложь);
	СтруктураПараметров.Вставить("НовСтатус",      Форма.Элементы.НаименованиеЭтапа.Заголовок);
	
	РегламентированнаяОтчетностьВызовСервера.СохранитьСтатусОтправки(СтруктураПараметров, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиНалоги

&НаКлиенте
Процедура НалогиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		Если Не ЗначениеЗаполнено(ПараметрыСтроки.НачалоПериода)
			Или Не ЗначениеЗаполнено(ПараметрыСтроки.КонецПериода) Тогда
			ПараметрыСтроки.НачалоПериода = НачалоМесяца(Объект.Дата);
			ПараметрыСтроки.КонецПериода  = КонецМесяца(Объект.Дата);
		КонецЕсли;
		Если НоваяСтрока И Не Копирование Тогда
			ПараметрыСтроки.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
	ТекущиеДанные.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ТекущиеДанные.НачалоПериода, ТекущиеДанные.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	
	Если Поле.Имя = "НалогиПредставлениеПериода" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода",
			НачалоМесяца(ПараметрыСтроки.НачалоПериода), КонецМесяца(ПараметрыСтроки.КонецПериода));
		Если Не ЗначениеЗаполнено(ПараметрыВыбораПериода.НачалоПериода) Или Не ЗначениеЗаполнено(ПараметрыВыбораПериода.КонецПериода) Тогда
			ПараметрыВыбораПериода.НачалоПериода = НачалоМесяца(Объект.Дата);
			ПараметрыВыбораПериода.КонецПериода  = КонецМесяца(Объект.Дата);
		КонецЕсли;
		ПараметрыВыбораПериода.Вставить("МинимальныйПериод",
			НачалоГода(ДобавитьМесяц(ДатаПереходаНаЕдиныйНалоговыйПлатеж, -1)));
		ПараметрыВыбораПериода.Вставить("ОграничениеСнизу", ПараметрыВыбораПериода.МинимальныйПериод);
		ИмяФормыПериода = "ОбщаяФорма.ВыборСтандартногоПериодаМесяц";
		Если НалогиУплачиваемыеПоквартально.Найти(ПараметрыСтроки.ТипНалога) <> Неопределено Тогда
			ИмяФормыПериода = "ОбщаяФорма.ВыборСтандартногоПериодаКвартал";
		ИначеЕсли НалогиУплачиваемыеЕжемесячно.Найти(ТекущиеДанные.ТипНалога) = Неопределено Тогда
			ПараметрыВыбораПериода.Вставить("ВыборКварталов", Истина);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСтандартногоПериодаЗавершение", ЭтотОбъект, ПараметрыСтроки);
		ОткрытьФорму(ИмяФормыПериода,
			ПараметрыВыбораПериода,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиТипНалогаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	
	ТипНалогаПриИзмененииНаСервере(ПараметрыСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиРегистрацияВНалоговомОрганеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	
	Если Объект.Налоги.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродолжитьЗаполнение", ЭтотОбъект, ПараметрыЗаполнения),
			НСтр("ru = 'Таблица налогов будет очищена. Продолжить?';
				|en = 'The tax table will be cleared. Continue?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПродолжитьЗаполнениеНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНДФЛЗаПервуюПоловину(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("НДФЛЗаПервуюПоловинуПериода", Истина);
	
	Если Объект.Налоги.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродолжитьЗаполнение", ЭтотОбъект, ПараметрыЗаполнения),
			НСтр("ru = 'Таблица налогов будет очищена. Продолжить?';
				|en = 'The tax table will be cleared. Continue?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПродолжитьЗаполнениеНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОчиститьСообщения();
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ДополнительныеПараметры = Новый Структура();
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно записать документ.
			|Выполнить запись документа и продолжить?';
			|en = 'Cannot run the command for unsaved documents.
			|Do you want to save the document and continue?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьВыгрузкуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если (Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка)) И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ПроверитьНаСервере(Отказ, ЕстьКритичныеОшибки, ТаблицаОшибок, Ложь);
	ДополнительныеПараметры.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	
	Если ЕстьКритичныеОшибки Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не заполнены обязательные поля.';
									|en = 'Required fields are not filled in.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И ТаблицаОшибок.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
			Новый Структура("ТаблицаОшибок", ТаблицаОшибок),
			ЭтотОбъект,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно записать документ.
			|Выполнить запись документа и продолжить?';
			|en = 'Cannot run the command for unsaved documents.
			|Do you want to save the document and continue?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьВИнтернетеЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если (Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка)) И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношения(Команда)
	
	ДополнительныеПараметры = Новый Структура();
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно записать документ.
			|Выполнить запись документа и продолжить?';
			|en = 'Cannot run the command for unsaved documents.
			|Do you want to save the document and continue?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьКонтрольныеСоотношенияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношенияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если (Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка)) И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("СообщениеПриОтсутствииОшибок") Тогда
		ДополнительныеПараметры.Вставить("СообщениеПриОтсутствииОшибок", Истина);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("Записать", Объект.Уведомление.Пустая());
	
	КлючУникальности = Объект.Уведомление;
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВыгружатьСОшибками(Команда)
	Объект.РазрешитьВыгружатьСОшибками = Не Объект.РазрешитьВыгружатьСОшибками;
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = Объект.РазрешитьВыгружатьСОшибками;
	Модифицированность = Истина;
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПродолжитьЗаполнение(Ответ, ПараметрыЗаполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Налоги.Очистить();
	ОчиститьСообщения();
	
	ПродолжитьЗаполнениеНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьЗаполнениеНаСервере(ПараметрыЗаполнения)
	
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("ДатаУведомления", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Ссылка", Объект.Ссылка);
	
	ЗаполнитьНаСервере(ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.Свойство("НДФЛЗаПервуюПоловинуПериода") И ПараметрыЗаполнения.НДФЛЗаПервуюПоловинуПериода
		И НЕ ДокументЗаПервуюПоловинуПериодаПоНДФЛ(Объект.Дата) Тогда
		
		ТекстСообщения = НСтр("ru = 'Подача уведомлений по НДФЛ за первую половину периода возможна только до 12 числа текущего месяца.';
								|en = 'You can submit PIT notifications for the first half of the period only before the 12th day of the current month.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Дата", "Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(ПараметрыЗаполнения)
	
	ТаблицаНалоги = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПолучитьДанныеДляУведомления(ПараметрыЗаполнения);
	Объект.Налоги.Загрузить(ТаблицаНалоги);
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
КонецПроцедуры

&НаСервере
Функция СформироватьВыгрузкуИПолучитьДанные() Экспорт
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	Если УведомлениеОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выгрузка = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если Выгрузка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выгрузка = Выгрузка[0];
	СтруктураВыгрузки = Новый Структура("ТестВыгрузки,КодировкаВыгрузки", Выгрузка.ТестВыгрузки, Выгрузка.КодировкаВыгрузки);
	СтруктураВыгрузки.Вставить("Данные", УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетДвоичныхДанных(УведомлениеОбъект.ИмяОтчета, "TIFF_2023_1"));
	СтруктураВыгрузки.Вставить("ИмяФайла", "1110355_5.03000_03.tif");
	Возврат СтруктураВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	Возврат УведомлениеОбъект.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОбновитьИнформационнуюПанельБРО()
	
	ПараметрыОтображения = ДокументооборотСКО.ПараметрыИнформационнойПанелиБРО();
	ПараметрыОтображения.Организация = Объект.Организация;
	ПараметрыОтображения.Группа = Элементы.ИнформационнаяПанельБРО;
	ПараметрыОтображения.Форма = ЭтотОбъект;
	ДокументооборотСКО.ОбновитьИнформационнуюПанельБРО(
		ПараметрыОтображения, 
		Перечисления.ТарифыОператораЭДО.ПромоЕНС);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДокументооборотСКОКлиент.ИнформационнаяПанельБРОНажатие(
		ЭтотОбъект, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
	
КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	НалогиУплачиваемыеЕжемесячно = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеЕжемесячно();
	НалогиУплачиваемыеПоквартально = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеПоквартально();
	ВидыАгентскогоНДФЛ = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНДФЛНалоговогоАгента();
	ДатаПереходаНаЕдиныйНалоговыйПлатеж = РеглУчетСервер.ДатаНачалаОбязательногоПримененияЕНП();
	ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ = ДобавитьМесяц(ДатаПереходаНаЕдиныйНалоговыйПлатеж, 12);
	
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = Объект.РазрешитьВыгружатьСОшибками;
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьРеквизитыОрганизации();
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     ГоловнаяОрганизация);
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УправлениеФормой();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ПериодПримененияЕНП =
		Объект.Дата >= ДатаПереходаНаЕдиныйНалоговыйПлатеж;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПроверитьКонтрольныеСоотношения",
		"Видимость",
		ПериодПримененияЕНП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогиПредставлениеПериода",
		"Видимость",
		ПериодПримененияЕНП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогиСрокУплатыПериода",
		"Видимость",
		ПериодПримененияЕНП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогиСрокУплаты",
		"Видимость",
		Не ПериодПримененияЕНП);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеСтрокиДокумента()
	
	ОписаниеСтроки = Новый Структура("НомерСтроки, ТипНалога, КодБК,
		|РегистрацияВНалоговомОргане, КодПоОКТМО, Сумма, СрокУплаты,
		|НачалоПериода, КонецПериода, ПредставлениеПериода");
	
	Возврат ОписаниеСтроки;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	ОбновитьИнформационнуюПанельБРО();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРеквизитыОрганизации()
	
	ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	ЭтоЮрЛицо           = Истина;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Объект.Организация);
		ЭтоЮрЛицо           = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане)  И ЗначениеЗаполнено(Объект.Организация) Тогда
		РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "РегистрацияВНалоговомОргане");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТипНалогаПриИзмененииНаСервере(ПараметрыСтроки)
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.ТипНалога) Тогда
		ПараметрыСтроки.КодБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(ПараметрыСтроки.ТипНалога);
		Если НалогиУплачиваемыеПоквартально.Найти(ПараметрыСтроки.ТипНалога) <> Неопределено Тогда
			ПараметрыСтроки.НачалоПериода = НачалоКвартала(ДобавитьМесяц(Объект.Дата, -3));
			ПараметрыСтроки.КонецПериода  = КонецКвартала(ПараметрыСтроки.НачалоПериода);
		Иначе
			ПараметрыСтроки.НачалоПериода = НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1));
			ПараметрыСтроки.КонецПериода  = КонецМесяца(ПараметрыСтроки.НачалоПериода);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтроки.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ПараметрыСтроки.НачалоПериода, ПараметрыСтроки.КонецПериода);
	
	ЗаполнитьСрокУплаты(ПараметрыСтроки);
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки)
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.РегистрацияВНалоговомОргане) Тогда
		ПараметрыСтроки.КодПоОКТМО =
			Справочники.РегистрацииВНалоговомОргане.КодТерритории(ПараметрыСтроки.РегистрацияВНалоговомОргане);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтандартногоПериодаЗавершение(РезультатВыбора, ПараметрыСтроки) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокУточненияПериода = Новый СписокЗначений;
	
	Если ЭтоНДФЛ(ПараметрыСтроки.ТипНалога)
		И (РезультатВыбора.НачалоПериода >= ДатаПереходаНаПостояннуюПередачуЧастичныхУведомленийПоНДФЛ
			ИЛИ Месяц(РезультатВыбора.НачалоПериода) = Месяц(КонецГода(РезультатВыбора.НачалоПериода))) Тогда
		
		ГраницаПериода = Дата(Год(РезультатВыбора.НачалоПериода), Месяц(РезультатВыбора.НачалоПериода), 23);
		ПерваяПоловина = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(РезультатВыбора.НачалоПериода), ГраницаПериода - 1);
		ВтораяПоловина = Новый Структура("НачалоПериода, КонецПериода", ГраницаПериода, КонецМесяца(РезультатВыбора.НачалоПериода));
		
		ПредставлениеМесяца = НРег(ОбщегоНазначенияБПКлиентСервер.ФормаПадежаМесяца(ГраницаПериода, 2, Ложь));
		СписокУточненияПериода.Добавить(ПерваяПоловина, СтрШаблон(НСтр("ru = 'Начало %1: до %2';
																		|en = 'Start %1: to %2'"),
			ПредставлениеМесяца, Формат(ГраницаПериода, "ДФ=dd.MM.yyyy")));
		СписокУточненияПериода.Добавить(ВтораяПоловина, СтрШаблон(НСтр("ru = 'Конец %1: %2';
																		|en = 'End %1: %2'"),
			ПредставлениеМесяца, ПредставлениеПериодаОтчета(ГраницаПериода, ВтораяПоловина.КонецПериода)));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УточнениеПериодаЗавершение", ЭтотОбъект, ПараметрыСтроки);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокУточненияПериода, "НалогиПредставлениеПериода");
		
	Иначе
		
		ВыбранныйПериод = СписокУточненияПериода.Добавить(РезультатВыбора,
			ПредставлениеПериодаОтчета(РезультатВыбора.НачалоПериода, РезультатВыбора.КонецПериода));
		УточнениеПериодаЗавершение(ВыбранныйПериод, ПараметрыСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПериодаЗавершение(РезультатВыбора, ПараметрыСтроки) Экспорт
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, РезультатВыбора.Значение);
	ЗаполнитьСрокУплаты(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
	ТекущиеДанные.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ТекущиеДанные.НачалоПериода, ТекущиеДанные.КонецПериода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаОтчета(НачалоПериода, КонецПериода)
	
	ПредставлениеПериода = "";
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		
		Если НачалоМесяца(НачалоПериода) <> НачалоПериода Или КонецМесяца(КонецПериода) <> КонецДня(КонецПериода) Тогда
			ПредставлениеПериода = Формат(НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yyyy");
		Иначе
			Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
			Иначе
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
			КонецЕсли;
			
			ПредставлениеПериода =
				ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоПериода, КонецПериода);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСрокУплаты(ПараметрыСтроки)
	
	ОтчетныйПериод = КонецДня(ПараметрыСтроки.КонецПериода);
	
	ГодУплаты = Год(ОтчетныйПериод + 1);
	МесяцУплаты = Месяц(ОтчетныйПериод + 1);
	ДеньУплаты  = 28;// Общий порядок
	
	ЭтоНДФЛ = ЭтоНДФЛ(ПараметрыСтроки.ТипНалога);
	Если ЭтоНДФЛ Тогда
		ГодУплаты = Год(ОтчетныйПериод);
		МесяцУплаты = Месяц(ОтчетныйПериод);
		Если ОтчетныйПериод = КонецГода(ОтчетныйПериод) Тогда
			ДеньУплаты = 31;
		ИначеЕсли ОтчетныйПериод = КонецМесяца(ОтчетныйПериод) Тогда
			МесяцУплаты = МесяцУплаты + 1;
			ДеньУплаты = 5;
		Иначе
			ДеньУплаты = 28;
		КонецЕсли;
	КонецЕсли;
	
	РасчетныйСрокУплаты = Дата(ГодУплаты, МесяцУплаты, ДеньУплаты);
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	ПараметрыПолученияБлижайшихРабочихДат = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат(ПроизводственныйКалендарь);
	Если ЭтоНДФЛ И ОтчетныйПериод = КонецГода(ОтчетныйПериод) Тогда
		ПараметрыПолученияБлижайшихРабочихДат.ПолучатьПредшествующие = Истина;
	КонецЕсли;
	
	ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
		КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(),
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РасчетныйСрокУплаты),
		ПараметрыПолученияБлижайшихРабочихДат);
	ПараметрыСтроки.СрокУплаты = ГрафикПереноса[РасчетныйСрокУплаты];
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги()
	
	Объект.СуммаДокумента = Объект.Налоги.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиПредставлениеПериода");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Налоги.ПредставлениеПериода", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Заполнить>';
																	|en = '<Fill>'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицы()
	
	Для каждого СтрокаТаблицы Из Объект.Налоги Цикл
		СтрокаТаблицы.ПредставлениеПериода =
			ПредставлениеПериодаОтчета(СтрокаТаблицы.НачалоПериода, СтрокаТаблицы.КонецПериода);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНДФЛ(ТипНалога)
	Возврат ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛ")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛ_ИП")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДивиденды")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДивидендыСотрудникам")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДоходыКонтрагентов")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛСПревышения");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДокументЗаПервуюПоловинуПериодаПоНДФЛ(Знач ДатаУведомления)
	Возврат День(ДатаУведомления) <= 12;
КонецФункции

#Область РаботаСУведомлениемКакСОтчетом

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(ДокументСсылка, УникальныйИдентификатор)
	
	Возврат Документы.УведомлениеОбИсчисленныхСуммахНалогов.ВыгрузитьУведомлениеОбИсчисленныхСуммахНалогов(
		ДокументСсылка,
		УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, , , Ложь, Объект.Уведомление);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере(Отказ = Ложь, ЕстьКритичныеОшибки = Ложь, ТаблицаОшибок, НеблокирующиеПроверки = Истина)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ПроверитьОбязательныеПоля(ЕстьКритичныеОшибки);
	Если ЕстьКритичныеОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ, НеблокирующиеПроверки);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	ТаблицаОшибок = УведомлениеОбъект.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
	Отказ = ТаблицаОшибок.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно записать документ.
			|Выполнить запись документа и продолжить?';
			|en = 'Cannot run the command for unsaved documents.
			|Do you want to save the document and continue?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношенияСЗапросомДальнейшегоДействия", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьКонтрольныеСоотношенияСЗапросомДальнейшегоДействия(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношенияСЗапросомДальнейшегоДействия(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СообщениеПриОтсутствииОшибок", Ложь);
	ПроверитьКонтрольныеСоотношенияЗавершение(Ответ, ДополнительныеПараметры);
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если ЕстьОшибкиПроверкиКонтрольныхСоотношений Тогда
		ТекстВопроса = НСтр("ru = 'При проверке контрольных соотношений обнаружены ошибки.
			|Наличие ошибок может привести к отказу в приеме уведомления.
			|Продолжить (не рекомендуется)?';
			|en = 'Errors were found when checking the control correlations.
			|The errors may lead to a refusal to accept the notification.
			|Continue (not recommended)?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если (Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка)) И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ПроверитьНаСервере(Отказ, ЕстьКритичныеОшибки, ТаблицаОшибок, Ложь);
	ДополнительныеПараметры.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	
	Если ЕстьКритичныеОшибки Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не заполнены обязательные поля.';
									|en = 'Required fields are not filled.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'В уведомлении обнаружены ошибки.
							|Продолжить (не рекомендуется)?';
							|en = 'Errors were detected in the notification.
							|Continue (not recommended)?'");
							
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.';
																											|en = 'Warning.'"));
	Иначе
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ТаблицаОшибок") Тогда
			Если ДополнительныеПараметры.ТаблицаОшибок.Количество() > 0 Тогда
				ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
					Новый Структура("ТаблицаОшибок", ДополнительныеПараметры.ТаблицаОшибок),
					ЭтотОбъект,
					Истина);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	РезультатПроверки = КонтрольныеСоотношенияИсчисленныеСуммыНалогов.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтотОбъект, Объект.Уведомление);
	ЕстьОшибкиПроверкиКонтрольныхСоотношений = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "ЧислоОшибок", 0) > 0;
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	Возврат ВыполнитьДокументированиеНаСервере();
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	Возврат КонтрольныеСоотношенияИсчисленныеСуммыНалогов.ВыполнитьДокументированиеНаСервере(ЭтотОбъект, Объект.Уведомление);
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "СумИсчНалог_2023" Тогда
		НомерСтроки = Число(СокрЛП(СтрЗаменить(Ячейка.Страница, "Стр. ", "")));
		Для Каждого СтрокаДокумента Из Объект.Налоги Цикл
			Если НомерСтроки = СтрокаДокумента.НомерСтроки Тогда
				Элементы.Налоги.ТекущаяСтрока = СтрокаДокумента.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт 
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
